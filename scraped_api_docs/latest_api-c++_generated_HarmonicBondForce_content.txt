HarmonicBondForceÂ¶ class HarmonicBondForce : public OpenMM::ForceÂ¶ This class implements an interaction between pairs of particles that varies harmonically with the distance between them. To use it, create a HarmonicBondForce object then call addBond() once for each bond. After a bond has been added, you can modify its force field parameters by calling setBondParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). Public Functions HarmonicBondForce()Â¶ Create a HarmonicBondForce. inline int getNumBonds() constÂ¶ Get the number of harmonic bond stretch terms in the potential function int addBond(int particle1, int particle2, double length, double k)Â¶ Add a bond term to the force field. Parameters particle1 â the index of the first particle connected by the bond particle2 â the index of the second particle connected by the bond length â the equilibrium length of the bond, measured in nm k â the harmonic force constant for the bond, measured in kJ/mol/nm^2 Returns the index of the bond that was added void getBondParameters(int index, int &particle1, int &particle2, double &length, double &k) constÂ¶ Get the force field parameters for a bond term. Parameters index â the index of the bond for which to get parameters particle1 â [out] the index of the first particle connected by the bond particle2 â [out] the index of the second particle connected by the bond length â [out] the equilibrium length of the bond, measured in nm k â [out] the harmonic force constant for the bond, measured in kJ/mol/nm^2 void setBondParameters(int index, int particle1, int particle2, double length, double k)Â¶ Set the force field parameters for a bond term. Parameters index â the index of the bond for which to set parameters particle1 â the index of the first particle connected by the bond particle2 â the index of the second particle connected by the bond length â the equilibrium length of the bond, measured in nm k â the harmonic force constant for the bond, measured in kJ/mol/nm^2 void updateParametersInContext(Context &context)Â¶ Update the per-bond parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setBondParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information this method updates is the values of per-bond parameters. The set of particles involved in a bond cannot be changed, nor can new bonds be added. void setUsesPeriodicBoundaryConditions(bool periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. virtual bool usesPeriodicBoundaryConditions() constÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise