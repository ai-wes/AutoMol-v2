LangevinIntegratorÂ¶ class LangevinIntegrator : public OpenMM::IntegratorÂ¶ This is an Integrator which simulates a System using Langevin dynamics. Public Functions LangevinIntegrator(double temperature, double frictionCoeff, double stepSize)Â¶ Create a LangevinIntegrator. Parameters temperature â the temperature of the heat bath (in Kelvin) frictionCoeff â the friction coefficient which couples the system to the heat bath (in inverse picoseconds) stepSize â the step size with which to integrate the system (in picoseconds) inline double getTemperature() constÂ¶ Get the temperature of the heat bath (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin void setTemperature(double temp)Â¶ Set the temperature of the heat bath (in Kelvin). Parameters temp â the temperature of the heat bath, measured in Kelvin inline double getFriction() constÂ¶ Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Returns the friction coefficient, measured in 1/ps void setFriction(double coeff)Â¶ Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Parameters coeff â the friction coefficient, measured in 1/ps inline int getRandomNumberSeed() constÂ¶ Get the random number seed. See setRandomNumberSeed() for details. inline void setRandomNumberSeed(int seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. virtual void step(int steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps â the number of time steps to take