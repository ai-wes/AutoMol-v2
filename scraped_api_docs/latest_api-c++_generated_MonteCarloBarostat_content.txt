MonteCarloBarostatÂ¶ class MonteCarloBarostat : public OpenMM::ForceÂ¶ This class uses a Monte Carlo algorithm to adjust the size of the periodic box, simulating the effect of constant pressure. This class assumes the simulation is also being run at constant temperature, and requires you to specify the system temperature (since it affects the acceptance probability for Monte Carlo moves). It does not actually perform temperature regulation, however. You must use another mechanism along with it to maintain the temperature, such as LangevinIntegrator or AndersenThermostat. Public Functions MonteCarloBarostat(double defaultPressure, double defaultTemperature, int frequency = 25)Â¶ Create a MonteCarloBarostat. Parameters defaultPressure â the default pressure acting on the system (in bar) defaultTemperature â the default temperature at which the system is being maintained (in Kelvin) frequency â the frequency at which Monte Carlo pressure changes should be attempted (in time steps) inline double getDefaultPressure() constÂ¶ Get the default pressure acting on the system (in bar). Returns the default pressure acting on the system, measured in bar. void setDefaultPressure(double pressure)Â¶ Set the default pressure acting on the system. This will affect any new Contexts you create, but not ones that already exist. Parameters pressure â the default pressure acting on the system, measured in bar. inline int getFrequency() constÂ¶ Get the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled. void setFrequency(int freq)Â¶ Set the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled. inline double getDefaultTemperature() constÂ¶ Get the default temperature at which the system is being maintained, measured in Kelvin. void setDefaultTemperature(double temp)Â¶ Set the default temperature at which the system is being maintained. This will affect any new Contexts you create, but not ones that already exist. Parameters temp â the system temperature, measured in Kelvin. inline int getRandomNumberSeed() constÂ¶ Get the random number seed. See setRandomNumberSeed() for details. inline void setRandomNumberSeed(int seed)Â¶ Set the random number seed. It is guaranteed that if two simulations are run with different random number seeds, the sequence of Monte Carlo steps will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. inline virtual bool usesPeriodicBoundaryConditions() constÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Public Static Functions static inline const std::string &Pressure()Â¶ This is the name of the parameter which stores the current pressure acting on the system (in bar). static inline const std::string &Temperature()Â¶ This is the name of the parameter which stores the current temperature at which the system is being maintained (in Kelvin)