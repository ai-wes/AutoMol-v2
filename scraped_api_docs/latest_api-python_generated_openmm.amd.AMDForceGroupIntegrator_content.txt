AMDForceGroupIntegratorÂ¶ class openmm.amd.AMDForceGroupIntegrator(dt, group, alphaGroup, EGroup)Â¶ AMDForceGroupIntegrator implements a single boost aMD integration algorithm. This is similar to AMDIntegrator, but is applied based on the energy of a single force group (typically representing torsions). For details, see Hamelberg et al., J. Chem. Phys. 127, 155102 (2007). __init__(dt, group, alphaGroup, EGroup)Â¶ Create a AMDForceGroupIntegrator. Parameters dt (time) â The integration time step to use group (int) â The force group to apply the boost to alphaGroup (energy) â The alpha parameter to use for the boosted force group EGroup (energy) â The energy cutoff to use for the boosted force group Methods __init__(dt,Â group,Â alphaGroup,Â EGroup) Create a AMDForceGroupIntegrator. addComputeGlobal(self,Â variable,Â expression) Add a step to the integration algorithm that computes a global value. addComputePerDof(self,Â variable,Â expression) Add a step to the integration algorithm that computes a per-DOF value. addComputeSum(self,Â variable,Â expression) Add a step to the integration algorithm that computes a sum over degrees of freedom. addConstrainPositions(self) Add a step to the integration algorithm that updates particle positions so all constraints are satisfied. addConstrainVelocities(self) Add a step to the integration algorithm that updates particle velocities so the net velocity along all constraints is 0. addGlobalVariable(self,Â name,Â initialValue) Define a new global variable. addPerDofVariable(self,Â name,Â initialValue) Define a new per-DOF variable. addTabulatedFunction(self,Â name,Â function) Add a tabulated function that may appear in expressions. addUpdateContextState(self) Add a step to the integration algorithm that allows Forces to update the context state. beginIfBlock(self,Â condition) Add a step which begins a new âifâ block. beginWhileBlock(self,Â condition) Add a step which begins a new âwhileâ block. endBlock(self) Add a step which marks the end of the most recently begun âifâ or âwhileâ block. getAlphaGroup() Get the value of alpha for the boosted force group. getComputationStep(self,Â index) Get the details of a computation step that has been added to the integration algorithm. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getEGroup() Get the energy threshold E for the boosted force group. getEffectiveEnergy(groupEnergy) Given the actual group energy of the system, return the value of the effective potential. getGlobalVariable(self,Â index) Get the current value of a global variable. getGlobalVariableByName(self,Â name) Get the current value of a global variable, specified by name. getGlobalVariableName(self,Â index) Get the name of a global variable. getIntegrationForceGroups(self) Get which force groups to use for integration. getKineticEnergyExpression(self) Get the expression to use for computing the kinetic energy. getNumComputations(self) Get the number of computation steps that have been added. getNumGlobalVariables(self) Get the number of global variables that have been defined. getNumPerDofVariables(self) Get the number of per-DOF variables that have been defined. getNumTabulatedFunctions(self) Get the number of tabulated functions that have been defined. getPerDofVariable() getPerDofVariableByName(self,Â name) Get the value of a per-DOF variable, specified by name. getPerDofVariableName(self,Â index) Get the name of a per-DOF variable. getRandomNumberSeed(self) Get the random number seed. getStepSize(self) Get the size of each time step, in picoseconds. getTabulatedFunction(->Â TabulatedFunction) Get a reference to a tabulated function that may appear in expressions. getTabulatedFunctionName(self,Â index) Get the name of a tabulated function that may appear in expressions. setAlphaGroup(alpha) Set the value of alpha for the boosted force group. setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setEGroup(E) Set the energy threshold E for the boosted force group. setGlobalVariable(self,Â index,Â value) Set the value of a global variable. setGlobalVariableByName(self,Â name,Â value) Set the value of a global variable, specified by name. setIntegrationForceGroups(groups) Set which force groups to use for integration. setKineticEnergyExpression(self,Â expression) Set the expression to use for computing the kinetic energy. setPerDofVariable(self,Â index,Â values) Set the value of a per-DOF variable. setPerDofVariableByName(self,Â name,Â values) Set the value of a per-DOF variable, specified by name. setRandomNumberSeed(self,Â seed) Set the random number seed. setStepSize(self,Â size) Set the size of each time step, in picoseconds. step(self,Â steps) Advance a simulation through time by taking a series of time steps. Attributes BlockEnd ComputeGlobal ComputePerDof ComputeSum ConstrainPositions ConstrainVelocities IfBlockStart UpdateContextState WhileBlockStart thisown The membership flag getAlphaGroup()Â¶ Get the value of alpha for the boosted force group. setAlphaGroup(alpha)Â¶ Set the value of alpha for the boosted force group. getEGroup()Â¶ Get the energy threshold E for the boosted force group. setEGroup(E)Â¶ Set the energy threshold E for the boosted force group. getEffectiveEnergy(groupEnergy)Â¶ Given the actual group energy of the system, return the value of the effective potential. Parameters groupEnergy (energy) â the actual potential energy of the boosted force group Returns the value of the effective potential Return type energy addComputeGlobal(self, variable, expression) → intÂ¶ Add a step to the integration algorithm that computes a global value. Parameters variable (string) â the global variable to store the computed value into expression (string) â a mathematical expression involving only global variables. In each integration step, its value is computed and stored into the specified variable. Returns the index of the step that was added Return type int addComputePerDof(self, variable, expression) → intÂ¶ Add a step to the integration algorithm that computes a per-DOF value. Parameters variable (string) â the per-DOF variable to store the computed value into expression (string) â a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom and stored into the specified variable. Returns the index of the step that was added Return type int addComputeSum(self, variable, expression) → intÂ¶ Add a step to the integration algorithm that computes a sum over degrees of freedom. Parameters variable (string) â the global variable to store the computed value into expression (string) â a mathematical expression involving both global and per-DOF variables. In each integration step, its value is computed for every degree of freedom. Those values are then added together, and the sum is stored in the specified variable. Returns the index of the step that was added Return type int addConstrainPositions(self) → intÂ¶ Add a step to the integration algorithm that updates particle positions so all constraints are satisfied. Returns the index of the step that was added Return type int addConstrainVelocities(self) → intÂ¶ Add a step to the integration algorithm that updates particle velocities so the net velocity along all constraints is 0. Returns the index of the step that was added Return type int addGlobalVariable(self, name, initialValue) → intÂ¶ Define a new global variable. Parameters name (string) â the name of the variable initialValue (double) â the variable will initially be set to this value Returns the index of the variable that was added Return type int addPerDofVariable(self, name, initialValue) → intÂ¶ Define a new per-DOF variable. Parameters name (string) â the name of the variable initialValue (double) â the variable will initially be set to this value for all degrees of freedom Returns the index of the variable that was added Return type int addTabulatedFunction(self, name, function) → intÂ¶ Add a tabulated function that may appear in expressions. Parameters name (string) â the name of the function as it appears in expressions function (TabulatedFunction *) â a TabulatedFunction object defining the function. The TabulatedFunction should have been created on the heap with the ânewâ operator. The integrator takes over ownership of it, and deletes it when the integrator itself is deleted. Returns the index of the function that was added Return type int addUpdateContextState(self) → intÂ¶ Add a step to the integration algorithm that allows Forces to update the context state. Returns the index of the step that was added Return type int beginIfBlock(self, condition) → intÂ¶ Add a step which begins a new âifâ block. Parameters condition (string) â a mathematical expression involving a comparison operator and global variables. All steps between this one and the end of the block are executed only if the condition is true. Returns the index of the step that was added Return type int beginWhileBlock(self, condition) → intÂ¶ Add a step which begins a new âwhileâ block. Parameters condition (string) â a mathematical expression involving a comparison operator and global variables. All steps between this one and the end of the block are executed repeatedly as long as the condition remains true. Returns the index of the step that was added Return type int endBlock(self) → intÂ¶ Add a step which marks the end of the most recently begun âifâ or âwhileâ block. Returns the index of the step that was added Return type int getComputationStep(self, index)Â¶ Get the details of a computation step that has been added to the integration algorithm. Parameters index (int) â the index of the computation step to get Returns type (ComputationType) â the type of computation this step performs variable (string) â the variable into which this step stores its result. If this step does not store a result in a variable, this will be an empty string. expression (string) â the expression this step evaluates. If this step does not evaluate an expression, this will be an empty string. getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getGlobalVariable(self, index) → doubleÂ¶ Get the current value of a global variable. Parameters index (int) â the index of the variable to get Returns the current value of the variable Return type double getGlobalVariableByName(self, name) → doubleÂ¶ Get the current value of a global variable, specified by name. Parameters name (string) â the name of the variable to get Returns the current value of the parameter Return type double getGlobalVariableName(self, index) → std::string const &Â¶ Get the name of a global variable. Parameters index (int) â the index of the variable to get Returns the name of the variable Return type string getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getKineticEnergyExpression(self) → std::string const &Â¶ Get the expression to use for computing the kinetic energy. The expression is evaluated for every degree of freedom. Those values are then added together, and the sum is reported as the current kinetic energy. getNumComputations(self) → intÂ¶ Get the number of computation steps that have been added. getNumGlobalVariables(self) → intÂ¶ Get the number of global variables that have been defined. getNumPerDofVariables(self) → intÂ¶ Get the number of per-DOF variables that have been defined. getNumTabulatedFunctions(self) → intÂ¶ Get the number of tabulated functions that have been defined. getPerDofVariable(self, index)Â¶ getPerDofVariable(self, index) → PyObject * getPerDofVariableByName(self, name)Â¶ Get the value of a per-DOF variable, specified by name. Parameters name (string) â the name of the variable to get Returns values â the values of the variable for all degrees of freedom are stored into this Return type vector< Vec3 > getPerDofVariableName(self, index) → std::string const &Â¶ Get the name of a per-DOF variable. Parameters index (int) â the index of the variable to get Returns the name of the variable Return type string getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double getTabulatedFunction(self, index) → TabulatedFunctionÂ¶ getTabulatedFunction(self, index) → TabulatedFunction Get a reference to a tabulated function that may appear in expressions. Parameters index (int) â the index of the function to get Returns the TabulatedFunction object defining the function Return type TabulatedFunction getTabulatedFunctionName(self, index) → std::string const &Â¶ Get the name of a tabulated function that may appear in expressions. Parameters index (int) â the index of the function to get Returns the name of the function as it appears in expressions Return type string setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setGlobalVariable(self, index, value)Â¶ Set the value of a global variable. Parameters index (int) â the index of the variable to set value (double) â the new value of the variable setGlobalVariableByName(self, name, value)Â¶ Set the value of a global variable, specified by name. Parameters name (string) â the name of the variable to set value (double) â the new value of the variable setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setKineticEnergyExpression(self, expression)Â¶ Set the expression to use for computing the kinetic energy. The expression is evaluated for every degree of freedom. Those values are then added together, and the sum is reported as the current kinetic energy. setPerDofVariable(self, index, values)Â¶ Set the value of a per-DOF variable. Parameters index (int) â the index of the variable to set values (vector< Vec3 >) â the new values of the variable for all degrees of freedom setPerDofVariableByName(self, name, values)Â¶ Set the value of a per-DOF variable, specified by name. Parameters name (string) â the name of the variable to set values (vector< Vec3 >) â the new values of the variable for all degrees of freedom setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random numbers will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take property thisownÂ¶ The membership flag