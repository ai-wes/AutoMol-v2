ATMForceÂ¶ class openmm.openmm.ATMForce(*args)Â¶ The ATMForce class implements the Alchemical Transfer Method (ATM) for OpenMM. ATM is used to compute the binding free energies of molecular complexes and of other equilibrium processes. ATM and its implementation are described in the open access article: Solmaz Azimi, Sheenam Khuttan, Joe Z. Wu, Rajat K. Pal, and Emilio Gallicchio. Relative Binding Free Energy Calculations for Ligands with Diverse Scaffolds with the Alchemical Transfer Method. J. Chem. Inf. Model. 62, 309 (2022) Refer to the publication above for a detailed description of the ATM method and the parameters used in this API and please cite it to support our work if you use this software in your research. The ATMForce implements an arbitrary potential energy function that depends on the potential energies (u0 and u1) of the system before and after a set of atoms are displaced by a specified amount. For example, you might displace a molecule from the solvent bulk to a receptor binding site to simulate a binding process. The potential energy function typically also depends on one or more parameters that are dialed to implement alchemical transformations. To use this class, create an ATMForce object, passing an algebraic expression to the constructor that defines the potential energy. This expression can be any combination of the variables u0 and u1. Then call addGlobalParameter() to define the parameters on which the potential energy expression depends. The values of global parameters may be modified during a simulation by calling Context::setParameter(). Next, call addForce() to add Force objects that define the terms of the potential energy function that change upon displacement. Finally, call addParticle() to specify the displacement applied to each particle. Displacements can be changed by calling setParticleParameters(). As any per-particle parameters, changes in displacements take effect only after calling updateParametersInContext(). As an example, the following code creates an ATMForce based on the change in energy of two particles when the second particle is displaced by 1 nm in the x direction. The energy change is dialed using an alchemical parameter Lambda, which in this case is set to 1/2: ATMForce *atmforce = new ATMForce("u0 + Lambda*(u1 - u0)"); atm->addGlobalParameter("Lambda", 0.5); atm->addParticle(Vec3(0, 0, 0)); atm->addParticle(Vec3(1, 0, 0)); CustomBondForce* force = new CustomBondForce("0.5*r^2"); atm->addForce(force); Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. If instead of the energy expression the ATMForce constructor specifies the values of a series of parameters, the default energy expression is used: select(step(Direction), u0, u1) + ((Lambda2-Lambda1)/Alpha)*log(1+exp(-Alpha*(usc-Uh))) + Lambda2*usc + W0; usc = select(step(u-Ubcore), (Umax-Ubcore)*fsc+Ubcore, u), u); fsc = (z^Acore-1)/(z^Acore+1); z = 1 + 2*(y/Acore) + 2*(y/Acore)^2; y = (u-Ubcore)/(Umax-Ubcore); u = select(step(Direction), 1, -1)*(u1-u0) which is the same as the soft-core softplus alchemical potential energy function in the Azimi et al. paper above. The ATMForce is then added to the System as any other Force system.addForce(atmforce); after which it will be used for energy/force evaluations for molecular dynamics and energy optimization. You can call getPerturbationEnergy() to query the values of u0 and u1, which are needed for computing free energies. In most cases, particles are only displaced in one of the two states evaluated by this force. It computes the change in energy between the current particle coordinates (as stored in the Context) and the displaced coordinates. In some cases, it is useful to apply displacements to both states. You can do this by providing two displacement vectors to addParticle(): atm->addParticle(Vec3(1, 0, 0), Vec3(-1, 0, 0)); In this case, u1 will be computed after displacing the particle in the positive x direction, and u0 will be computed after displacing it in the negative x direction. This class also has the ability to compute derivatives of the potential energy with respect to global parameters. Call addEnergyParameterDerivative() to request that the derivative with respect to a particular parameter be computed. You can then query its value in a Context by calling getState() on it. __init__(self, energy) → ATMForceÂ¶ __init__(self, lambda1, lambda2, alpha, uh, w0, umax, ubcore, acore, direction) → ATMForce __init__(self, other) → ATMForce Create an ATMForce object with the default softplus energy expression. The values passed to this constructor are the default values of the global parameters for newly created Contexts. Their values can be changed by calling setParameter() on the Context using the parameter names defined by the Lambda1(), Lambda2(), etc. methods below. Parameters lambda1 (double) â the default value of the Lambda1 parameter (dimensionless). This should be a number between 0 and 1. lambda2 (double) â the default value of the Lambda2 parameter (dimensionless). This should be a number between 0 and 1. alpha (double) â the default value of the Alpha parameter (kJ/mol)^-1 uh (double) â the default value of the Uh parameter (kJ/mol) w0 (double) â the default value of the W0 parameter (kJ/mol) umax (double) â the default value of the Umax parameter (kJ/mol) ubcore (double) â the default value of the Ubcore parameter (kJ/mol) acore (double) â the default value of the Acore parameter dimensionless) direction (double) â the default value of the Direction parameter (dimensionless). This should be either 1 for the forward transfer, or -1 for the backward transfer. Methods Acore() Returns the name of the global parameter corresponding to acore. Alpha() Returns the name of the global parameter corresponding to alpha. Direction() Returns the name of the global parameter corresponding to direction. Lambda1() Returns the name of the global parameter corresponding to lambda1. Lambda2() Returns the name of the global parameter corresponding to lambda2. Ubcore() Returns the name of the global parameter corresponding to ubcore. Uh() Returns the name of the global parameter corresponding to uh. Umax() Returns the name of the global parameter corresponding to umax. W0() Returns the name of the global parameter corresponding to w0. __init__(->Â ATMForce Â ->Â ATMForce) Create an ATMForce object with the default softplus energy expression. addEnergyParameterDerivative(self,Â name) Request that this Force compute the derivative of its energy with respect to a global parameter. addForce(self,Â force) Add a Force whose energy will be computed by the ATMForce. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that the interaction may depend on. addParticle(self,Â displacement1[,Â displacement0]) Add a particle to the force. getEnergyFunction(self) Get the algebraic expression that gives the energy of the system getEnergyParameterDerivativeName(self,Â index) Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. getForce(self,Â index) return the force from index getForceGroup(self) Get the force group this Force belongs to. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getName(self) Get the name of this Force. getNumEnergyParameterDerivatives(self) Get the number of global parameters with respect to which the derivative of the energy should be computed. getNumForces(self) Get the number of Forces included in the ATMForce. getNumGlobalParameters(self) Get the number of global parameters that the interaction depends on. getNumParticles(self) Get the number of particles managed by ATMForce. getParticleParameters(self,Â index) Get the parameters for a particle getPerturbationEnergy(self,Â context) Returns the current perturbation energy. setEnergyFunction(self,Â energy) Set the algebraic expression that gives the energy of the system setForceGroup(self,Â group) Set the force group this Force belongs to. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setName(self,Â name) Set the name of this Force. setParticleParameters(self,Â index,Â displacement1) Set the parameters for a particle updateParametersInContext(self,Â context) Update the per-particle parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag static Lambda1() → std::string const &Â¶ Returns the name of the global parameter corresponding to lambda1. The value assigned to this parameter should be a number between 0 and 1. static Lambda2() → std::string const &Â¶ Returns the name of the global parameter corresponding to lambda2. The value assigned to this parameter should be a number between 0 and 1. static Alpha() → std::string const &Â¶ Returns the name of the global parameter corresponding to alpha. The value assigned to this parameter should be in units of (kJ/mol)^-1. static Uh() → std::string const &Â¶ Returns the name of the global parameter corresponding to uh. The value assigned to this parameter should be in units of (kJ/mol). static W0() → std::string const &Â¶ Returns the name of the global parameter corresponding to w0. The value assigned to this parameter should be in units of (kJ/mol). static Umax() → std::string const &Â¶ Returns the name of the global parameter corresponding to umax. The value assigned to this parameter should be in units of (kJ/mol). static Ubcore() → std::string const &Â¶ Returns the name of the global parameter corresponding to ubcore. The value assigned to this parameter should be in units of (kJ/mol). static Acore() → std::string const &Â¶ Returns the name of the global parameter corresponding to acore. static Direction() → std::string const &Â¶ Returns the name of the global parameter corresponding to direction. The value assigned to this parameter should be either 1 for the forward transfer, or -1 for the backward transfer. getNumParticles(self) → intÂ¶ Get the number of particles managed by ATMForce. This should be the same number of particles as the System getNumForces(self) → intÂ¶ Get the number of Forces included in the ATMForce. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that the interaction depends on. getNumEnergyParameterDerivatives(self) → intÂ¶ Get the number of global parameters with respect to which the derivative of the energy should be computed. getEnergyFunction(self) → std::string const &Â¶ Get the algebraic expression that gives the energy of the system setEnergyFunction(self, energy)Â¶ Set the algebraic expression that gives the energy of the system addForce(self, force) → intÂ¶ Add a Force whose energy will be computed by the ATMForce. Parameters force (Force *) â the Force to the be added, which should have been created on the heap with the ânewâ operator. The ATMForce takes over ownership of it, and deletes the Force when the ATMForce itself is deleted. Returns The index within ATMForce of the force that was added Return type int getForce(self, index) → ForceÂ¶ return the force from index addParticle(self, displacement1, displacement0=Vec3()) → intÂ¶ Add a particle to the force. All of the particles in the System must be added to the ATMForce in the same order as they appear in the System. Parameters displacement1 (Vec3) â the displacement of the particle for the target state in nm displacement0 (Vec3) â the displacement of the particle for the initial state in nm Returns the index of the particle that was added Return type int getParticleParameters(self, index)Â¶ Get the parameters for a particle Parameters index (int) â the index in the force for the particle for which to get parameters displacement1 (Vec3) â the displacement of the particle for the target state in nm displacement0 (Vec3) â the displacement of the particle for the initial state in nm setParticleParameters(self, index, displacement1, displacement0=Vec3())Â¶ Set the parameters for a particle Parameters index (int) â the index in the force of the particle for which to set parameters displacement1 (Vec3) â the displacement of the particle for the target state in nm displacement0 (Vec3) â the displacement of the particle for the initial state in nm addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addEnergyParameterDerivative(self, name)Â¶ Request that this Force compute the derivative of its energy with respect to a global parameter. The parameter must have already been added with addGlobalParameter(). Parameters name (string) â the name of the parameter getEnergyParameterDerivativeName(self, index) → std::string const &Â¶ Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. Parameters index (int) â the index of the parameter derivative, between 0 and getNumEnergyParameterDerivatives() Returns the parameter name Return type string updateParametersInContext(self, context)Â¶ Update the per-particle parameters in a Context to match those stored in this Force object. This method should be called after updating parameters with setParticleParameters() to copy them over to the Context. The only information this method updates is the values of per-particle parameters. The number of particles cannot be changed. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. getPerturbationEnergy(self, context)Â¶ Returns the current perturbation energy. Parameters context (Context) â the Context for which to return the energy u1 (double) â on exit, the energy of the displaced state u0 (double) â on exit, the energy of the non-displaced state energy (double) â on exit, the value of this forceâs energy function getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.