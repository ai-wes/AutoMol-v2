AmoebaGeneralizedKirkwoodForceÂ¶ class openmm.openmm.AmoebaGeneralizedKirkwoodForce(*args)Â¶ This class implements an implicit solvation force using the generalized Kirkwood/Grycuk model. To use this class, create an AmoebaGeneralizedKirkwoodForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define parameters must be equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). __init__(self) → AmoebaGeneralizedKirkwoodForceÂ¶ __init__(self, other) → AmoebaGeneralizedKirkwoodForce This class implements an implicit solvation force using the generalized Kirkwood/Grycuk model. To use this class, create an AmoebaGeneralizedKirkwoodForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define parameters must be equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). Methods __init__(->Â AmoebaGeneralizedKirkwoodForce) This class implements an implicit solvation force using the generalized Kirkwood/Grycuk model. addParticle(self,Â charge,Â radius,Â scalingFactor) Add the parameters for a particle. getForceGroup(self) Get the force group this Force belongs to. getIncludeCavityTerm(self) Get the flag signaling whether the cavity term should be included getName(self) Get the name of this Force. getNumParticles(self) Get the number of particles in the system. getParticleParameters(self,Â index) Get the force field parameters for a particle. getProbeRadius(self) Get the probe radius (nm) used in SASA contribution getSoluteDielectric(self) Get the dielectric constant for the solute. getSolventDielectric(self) Get the dielectric constant for the solvent. getSurfaceAreaFactor(self) Get the surface area factor kJ/(nm*nm) used in SASA contribution setForceGroup(self,Â group) Set the force group this Force belongs to. setIncludeCavityTerm(self,Â includeCavityTerm) Set the flag signaling whether the cavity term should be included setName(self,Â name) Set the name of this Force. setParticleParameters(self,Â index,Â charge,Â â¦) Set the force field parameters for a particle. setProbeRadius(self,Â probeRadius) Set the probe radius (nm) used in SASA contribution setSoluteDielectric(self,Â dielectric) Set the dielectric constant for the solute. setSolventDielectric(self,Â dielectric) Set the dielectric constant for the solvent. setSurfaceAreaFactor(self,Â surfaceAreaFactor) Set the surface area factor kJ/(nm*nm) used in SASA contribution updateParametersInContext(self,Â context) Update the per-particle parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumParticles(self) → intÂ¶ Get the number of particles in the system. addParticle(self, charge, radius, scalingFactor) → intÂ¶ Add the parameters for a particle. This should be called once for each particle in the System. When it is called for the iâth time, it specifies the parameters for the iâth particle. Parameters charge (double) â the charge of the particle, measured in units of the proton charge radius (double) â the atomic radius of the particle, measured in nm scalingFactor (double) â the scaling factor for the particle Returns the index of the particle that was added Return type int getParticleParameters(self, index)Â¶ Get the force field parameters for a particle. Parameters index (int) â the index of the particle for which to get parameters Returns charge (double) â the charge of the particle, measured in units of the proton charge radius (double) â the atomic radius of the particle, measured in nm scalingFactor (double) â the scaling factor for the particle setParticleParameters(self, index, charge, radius, scalingFactor)Â¶ Set the force field parameters for a particle. Parameters index (int) â the index of the particle for which to set parameters charge (double) â the charge of the particle, measured in units of the proton charge radius (double) â the atomic radius of the particle, measured in nm scalingFactor (double) â the scaling factor for the particle getSolventDielectric(self) → doubleÂ¶ Get the dielectric constant for the solvent. setSolventDielectric(self, dielectric)Â¶ Set the dielectric constant for the solvent. getSoluteDielectric(self) → doubleÂ¶ Get the dielectric constant for the solute. setSoluteDielectric(self, dielectric)Â¶ Set the dielectric constant for the solute. getIncludeCavityTerm(self) → intÂ¶ Get the flag signaling whether the cavity term should be included setIncludeCavityTerm(self, includeCavityTerm)Â¶ Set the flag signaling whether the cavity term should be included getProbeRadius(self) → doubleÂ¶ Get the probe radius (nm) used in SASA contribution setProbeRadius(self, probeRadius)Â¶ Set the probe radius (nm) used in SASA contribution getSurfaceAreaFactor(self) → doubleÂ¶ Get the surface area factor kJ/(nm*nm) used in SASA contribution setSurfaceAreaFactor(self, surfaceAreaFactor)Â¶ Set the surface area factor kJ/(nm*nm) used in SASA contribution updateParametersInContext(self, context)Â¶ Update the per-particle parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setParticleParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information this method updates is the values of per-particle parameters. All other aspects of the Force (the probe radius, the surface area factor, etc.) are unaffected and can only be changed by reinitializing the Context. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if nonbondedMethod uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.