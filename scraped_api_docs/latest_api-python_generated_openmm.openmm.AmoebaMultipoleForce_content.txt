AmoebaMultipoleForceÂ¶ class openmm.openmm.AmoebaMultipoleForce(*args)Â¶ This class implements the Amoeba multipole interaction. To use it, create an AmoebaMultipoleForce object then call addMultipole() once for each atom. After an entry has been added, you can modify its force field parameters by calling setMultipoleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). __init__(self) → AmoebaMultipoleForceÂ¶ __init__(self, other) → AmoebaMultipoleForce Create an AmoebaMultipoleForce. Methods __init__(->Â AmoebaMultipoleForce) Create an AmoebaMultipoleForce. addMultipole(self,Â charge,Â molecularDipole,Â â¦) Add multipole-related info for a particle getAEwald(self) Get the Ewald alpha parameter. getCovalentMap(self,Â index,Â typeId) Get the CovalentMap for an atom getCovalentMaps(self,Â index) Get the CovalentMap for an atom getCutoffDistance(self) Get the cutoff distance (in nm) being used for nonbonded interactions. getElectrostaticPotential(self,Â inputGrid,Â â¦) Get the electrostatic potential. getEwaldErrorTolerance(self) Get the error tolerance for Ewald summation. getExtrapolationCoefficients(self) Get the coefficients for the mu_0, mu_1, mu_2, â¦, mu_n terms in the extrapolation algorithm for induced dipoles. getForceGroup(self) Get the force group this Force belongs to. getInducedDipoles(self,Â context) Get the induced dipole moments of all particles. getLabFramePermanentDipoles(self,Â context) Get the fixed dipole moments of all particles in the global reference frame. getMultipoleParameters(self,Â index) Get the multipole parameters for a particle. getMutualInducedMaxIterations(self) Get the max number of iterations to be used in calculating the mutual induced dipoles getMutualInducedTargetEpsilon(self) Get the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles getName(self) Get the name of this Force. getNonbondedMethod(self) Get the method used for handling long-range nonbonded interactions. getNumMultipoles(self) Get the number of particles in the potential function getPMEParameters(self) Get the parameters to use for PME calculations. getPMEParametersInContext(self,Â context) Get the parameters being used for PME in a particular Context. getPmeBSplineOrder(self) Get the B-spline order to use for PME charge spreading getPmeGridDimensions(self) Get the PME grid dimensions. getPolarizationType(self) Get polarization type getSystemMultipoleMoments(self,Â context) Get the system multipole moments. getTotalDipoles(self,Â context) Get the total dipole moments (fixed plus induced) of all particles. setAEwald(self,Â aewald) Set the Ewald alpha parameter. setCovalentMap(self,Â index,Â typeId,Â â¦) Set the CovalentMap for an atom setCutoffDistance(self,Â distance) Set the cutoff distance (in nm) being used for nonbonded interactions. setEwaldErrorTolerance(self,Â tol) Get the error tolerance for Ewald summation. setExtrapolationCoefficients(self,Â coefficients) Set the coefficients for the mu_0, mu_1, mu_2, â¦, mu_n terms in the extrapolation algorithm for induced dipoles. setForceGroup(self,Â group) Set the force group this Force belongs to. setMultipoleParameters(self,Â index,Â charge,Â â¦) Set the multipole parameters for a particle. setMutualInducedMaxIterations(self,Â â¦) Set the max number of iterations to be used in calculating the mutual induced dipoles setMutualInducedTargetEpsilon(self,Â â¦) Set the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles setName(self,Â name) Set the name of this Force. setNonbondedMethod(self,Â method) Set the method used for handling long-range nonbonded interactions. setPMEParameters(self,Â alpha,Â nx,Â ny,Â nz) Set the parameters to use for PME calculations. setPmeGridDimensions(self,Â gridDimension) Set the PME grid dimensions. setPolarizationType(self,Â type) Set the polarization type updateParametersInContext(self,Â context) Update the multipole parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes Bisector Covalent12 Covalent13 Covalent14 Covalent15 CovalentEnd Direct Extrapolated LastAxisTypeIndex Mutual NoAxisType NoCutoff PME PolarizationCovalent11 PolarizationCovalent12 PolarizationCovalent13 PolarizationCovalent14 ThreeFold ZBisect ZOnly ZThenX thisown The membership flag property thisownÂ¶ The membership flag getNumMultipoles(self) → intÂ¶ Get the number of particles in the potential function getNonbondedMethod(self) → OpenMM::AmoebaMultipoleForce::NonbondedMethodÂ¶ Get the method used for handling long-range nonbonded interactions. setNonbondedMethod(self, method)Â¶ Set the method used for handling long-range nonbonded interactions. getPolarizationType(self) → OpenMM::AmoebaMultipoleForce::PolarizationTypeÂ¶ Get polarization type setPolarizationType(self, type)Â¶ Set the polarization type getCutoffDistance(self) → doubleÂ¶ Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Returns the cutoff distance, measured in nm Return type double setCutoffDistance(self, distance)Â¶ Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Parameters distance (double) â the cutoff distance, measured in nm getPMEParameters(self)Â¶ Get the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Returns alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis setPMEParameters(self, alpha, nx, ny, nz)Â¶ Set the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Parameters alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis getAEwald(self) → doubleÂ¶ Get the Ewald alpha parameter. If this is 0 (the default), a value is chosen automatically based on the Ewald error tolerance. Deprecated This method exists only for backward compatibility. Use getPMEParameters() instead. Returns the Ewald alpha parameter Return type double setAEwald(self, aewald)Â¶ Set the Ewald alpha parameter. If this is 0 (the default), a value is chosen automatically based on the Ewald error tolerance. Deprecated This method exists only for backward compatibility. Use setPMEParameters() instead. Parameters aewald (double) â alpha parameter getPmeBSplineOrder(self) → intÂ¶ Get the B-spline order to use for PME charge spreading Returns the B-spline order Return type int getPmeGridDimensions(self)Â¶ Get the PME grid dimensions. If Ewald alpha is 0 (the default), this is ignored and grid dimensions are chosen automatically based on the Ewald error tolerance. Deprecated This method exists only for backward compatibility. Use getPMEParameters() instead. Returns the PME grid dimensions Return type void setPmeGridDimensions(self, gridDimension)Â¶ Set the PME grid dimensions. If Ewald alpha is 0 (the default), this is ignored and grid dimensions are chosen automatically based on the Ewald error tolerance. Deprecated This method exists only for backward compatibility. Use setPMEParameters() instead. Parameters gridDimension (vector< int >) â the PME grid dimensions getPMEParametersInContext(self, context)Â¶ Get the parameters being used for PME in a particular Context. Because some platforms have restrictions on the allowed grid sizes, the values that are actually used may be slightly different from those specified with setPmeGridDimensions(), or the standard values calculated based on the Ewald error tolerance. See the manual for details. Parameters context (Context) â the Context for which to get the parameters Returns alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis addMultipole(self, charge, molecularDipole, molecularQuadrupole, axisType, multipoleAtomZ, multipoleAtomX, multipoleAtomY, thole, dampingFactor, polarity) → intÂ¶ Add multipole-related info for a particle Parameters charge (double) â the particleâs charge molecularDipole (vector< double >) â the particleâs molecular dipole (vector of size 3) molecularQuadrupole (vector< double >) â the particleâs molecular quadrupole (vector of size 9) axisType (int) â the particleâs axis type multipoleAtomZ (int) â index of first atom used in constructing lab<->molecular frames multipoleAtomX (int) â index of second atom used in constructing lab<->molecular frames multipoleAtomY (int) â index of second atom used in constructing lab<->molecular frames thole (double) â Thole parameter dampingFactor (double) â dampingFactor parameter polarity (double) â polarity parameter Returns the index of the particle that was added Return type int getMultipoleParameters(self, index)Â¶ Get the multipole parameters for a particle. Parameters index (int) â the index of the atom for which to get parameters Returns charge (double) â the particleâs charge molecularDipole (vector< double >) â the particleâs molecular dipole (vector of size 3) molecularQuadrupole (vector< double >) â the particleâs molecular quadrupole (vector of size 9) axisType (int) â the particleâs axis type multipoleAtomZ (int) â index of first atom used in constructing lab<->molecular frames multipoleAtomX (int) â index of second atom used in constructing lab<->molecular frames multipoleAtomY (int) â index of second atom used in constructing lab<->molecular frames thole (double) â Thole parameter dampingFactor (double) â dampingFactor parameter polarity (double) â polarity parameter setMultipoleParameters(self, index, charge, molecularDipole, molecularQuadrupole, axisType, multipoleAtomZ, multipoleAtomX, multipoleAtomY, thole, dampingFactor, polarity)Â¶ Set the multipole parameters for a particle. Parameters index (int) â the index of the atom for which to set parameters charge (double) â the particleâs charge molecularDipole (vector< double >) â the particleâs molecular dipole (vector of size 3) molecularQuadrupole (vector< double >) â the particleâs molecular quadrupole (vector of size 9) axisType (int) â the particleâs axis type multipoleAtomZ (int) â index of first atom used in constructing lab<->molecular frames multipoleAtomX (int) â index of second atom used in constructing lab<->molecular frames multipoleAtomY (int) â index of second atom used in constructing lab<->molecular frames thole (double) â thole parameter dampingFactor (double) â damping factor parameter polarity (double) â polarity parameter setCovalentMap(self, index, typeId, covalentAtoms)Â¶ Set the CovalentMap for an atom Parameters index (int) â the index of the atom for which to set parameters typeId (CovalentType) â CovalentTypes type covalentAtoms (vector< int >) â vector of covalent atoms associated w/ the specfied CovalentType getCovalentMap(self, index, typeId)Â¶ Get the CovalentMap for an atom Parameters index (int) â the index of the atom for which to set parameters typeId (CovalentType) â CovalentTypes type Returns covalentAtoms â output vector of covalent atoms associated w/ the specfied CovalentType Return type vector< int > getCovalentMaps(self, index)Â¶ Get the CovalentMap for an atom Parameters index (int) â the index of the atom for which to set parameters Returns covalentLists â output vector of covalent lists of atoms Return type vector< std::vector< int > > getMutualInducedMaxIterations(self) → intÂ¶ Get the max number of iterations to be used in calculating the mutual induced dipoles Returns max number of iterations Return type int setMutualInducedMaxIterations(self, inputMutualInducedMaxIterations)Â¶ Set the max number of iterations to be used in calculating the mutual induced dipoles Parameters inputMutualInducedMaxIterations (int) â number of iterations getMutualInducedTargetEpsilon(self) → doubleÂ¶ Get the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles Returns target epsilon Return type double setMutualInducedTargetEpsilon(self, inputMutualInducedTargetEpsilon)Â¶ Set the target epsilon to be used to test for convergence of iterative method used in calculating the mutual induced dipoles Parameters inputMutualInducedTargetEpsilon (double) â target epsilon setExtrapolationCoefficients(self, coefficients)Â¶ Set the coefficients for the mu_0, mu_1, mu_2, â¦, mu_n terms in the extrapolation algorithm for induced dipoles. Parameters coefficients (vector< double >) â a vector whose mth entry specifies the coefficient for mu_m. The length of this vector determines how many iterations are performed. getExtrapolationCoefficients(self) → vectordÂ¶ Get the coefficients for the mu_0, mu_1, mu_2, â¦, mu_n terms in the extrapolation algorithm for induced dipoles. In this release, the default values for the coefficients are [-0.154, 0.017, 0.658, 0.474], but be aware that those may change in a future release. getEwaldErrorTolerance(self) → doubleÂ¶ Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the grid dimensions and separation (alpha) parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however. This can be overridden by explicitly setting an alpha parameter and grid dimensions to use. setEwaldErrorTolerance(self, tol)Â¶ Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the grid dimensions and separation (alpha) parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however. This can be overridden by explicitly setting an alpha parameter and grid dimensions to use. getLabFramePermanentDipoles(self, context)Â¶ Get the fixed dipole moments of all particles in the global reference frame. Parameters context (Context) â the Context for which to get the fixed dipoles Returns dipoles â the fixed dipole moment of particle i is stored into the iâth element Return type vector< Vec3 > getInducedDipoles(self, context)Â¶ Get the induced dipole moments of all particles. Parameters context (Context) â the Context for which to get the induced dipoles Returns dipoles â the induced dipole moment of particle i is stored into the iâth element Return type vector< Vec3 > getTotalDipoles(self, context)Â¶ Get the total dipole moments (fixed plus induced) of all particles. Parameters context (Context) â the Context for which to get the total dipoles Returns dipoles â the total dipole moment of particle i is stored into the iâth element Return type vector< Vec3 > getElectrostaticPotential(self, inputGrid, context)Â¶ Get the electrostatic potential. Parameters inputGrid (vector< Vec3 >) â input grid points over which the potential is to be evaluated context (Context) â context Returns outputElectrostaticPotential â output potential Return type vector< double > getSystemMultipoleMoments(self, context)Â¶ Get the system multipole moments. This method is most useful for non-periodic systems. When called for a periodic system, only the lowest nonvanishing moment has a well defined value. This means that if the system has a net nonzero charge, the dipole and quadrupole moments are not well defined and should be ignored. If the net charge is zero, the dipole moment is well defined (and really represents a dipole density), but the quadrupole moment is still undefined and should be ignored. Parameters context (Context) â context Returns outputMultipoleMoments â (charge, dipole_x, dipole_y, dipole_z, quadrupole_xx, quadrupole_xy, quadrupole_xz, quadrupole_yx, quadrupole_yy, quadrupole_yz, quadrupole_zx, quadrupole_zy, quadrupole_zz) Return type vector< double > updateParametersInContext(self, context)Â¶ Update the multipole parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setMultipoleParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the parameters of multipoles. All other aspects of the Force (the nonbonded method, the cutoff distance, etc.) are unaffected and can only be changed by reinitializing the Context. Furthermore, this method cannot be used to add new multipoles, only to change the parameters of existing ones. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if nonbondedMethod uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.