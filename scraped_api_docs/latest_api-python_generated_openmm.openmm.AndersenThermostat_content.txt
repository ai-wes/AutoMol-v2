AndersenThermostatÂ¶ class openmm.openmm.AndersenThermostat(*args)Â¶ This class uses the Andersen method to maintain constant temperature. __init__(self, defaultTemperature, defaultCollisionFrequency) → AndersenThermostatÂ¶ __init__(self, other) → AndersenThermostat Create an AndersenThermostat. Parameters defaultTemperature (double) â the default temperature of the heat bath (in Kelvin) defaultCollisionFrequency (double) â the default collision frequency (in 1/ps) Methods CollisionFrequency() This is the name of the parameter which store the current collision frequency (in 1/ps). Temperature() This is the name of the parameter which stores the current temperature of the heat bath (in Kelvin). __init__(->Â AndersenThermostat) Create an AndersenThermostat. getDefaultCollisionFrequency(self) Get the default collision frequency (in 1/ps). getDefaultTemperature(self) Get the default temperature of the heat bath (in Kelvin). getForceGroup(self) Get the force group this Force belongs to. getName(self) Get the name of this Force. getRandomNumberSeed(self) Get the random number seed. setDefaultCollisionFrequency(self,Â frequency) Set the default collision frequency. setDefaultTemperature(self,Â temperature) Set the default temperature of the heat bath. setForceGroup(self,Â group) Set the force group this Force belongs to. setName(self,Â name) Set the name of this Force. setRandomNumberSeed(self,Â seed) Set the random number seed. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag static Temperature() → std::string const &Â¶ This is the name of the parameter which stores the current temperature of the heat bath (in Kelvin). static CollisionFrequency() → std::string const &Â¶ This is the name of the parameter which store the current collision frequency (in 1/ps). getDefaultTemperature(self) → doubleÂ¶ Get the default temperature of the heat bath (in Kelvin). Returns the default temperature of the heat bath, measured in Kelvin. Return type double setDefaultTemperature(self, temperature)Â¶ Set the default temperature of the heat bath. This will affect any new Contexts you create, but not ones that already exist. Parameters temperature (double) â the default temperature of the heat bath (in Kelvin) getDefaultCollisionFrequency(self) → doubleÂ¶ Get the default collision frequency (in 1/ps). Returns the default collision frequency, measured in 1/ps. Return type double setDefaultCollisionFrequency(self, frequency)Â¶ Set the default collision frequency. This will affect any new Contexts you create, but not ones that already exist. Parameters frequency (double) â the default collision frequency (in 1/ps) getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of collisions will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.