CMAPTorsionForceÂ¶ class openmm.openmm.CMAPTorsionForce(*args)Â¶ This class implements an interaction between pairs of dihedral angles. The interaction energy is defined by an âenergy correction mapâ (CMAP), which is simply a set of tabulated energy values on a regular grid of (phi, psi) angles. Natural cubic spline interpolation is used to compute forces and energies at arbitrary values of the two angles. To use this class, first create one or more energy correction maps by calling addMap(). For each one, you provide an array of energies at uniformly spaced values of the two angles. Next, add interactions by calling addTorsion(). For each one, you specify the sequence of particles used to calculate each of the two dihedral angles, and the index of the map used to calculate their interaction energy. __init__(self) → CMAPTorsionForceÂ¶ __init__(self, other) → CMAPTorsionForce Create a CMAPTorsionForce. Methods __init__(->Â CMAPTorsionForce) Create a CMAPTorsionForce. addMap(self,Â size,Â energy) Create a new map that can be used for torsion pairs. addTorsion(self,Â map,Â a1,Â a2,Â a3,Â a4,Â b1,Â â¦) Add a CMAP torsion term to the force field. getForceGroup(self) Get the force group this Force belongs to. getMapParameters(self,Â index) Get the energy values of a map. getName(self) Get the name of this Force. getNumMaps(self) Get the number of maps that have been defined. getNumTorsions(self) Get the number of CMAP torsion terms in the potential function getTorsionParameters(self,Â index) Get the force field parameters for a CMAP torsion term. setForceGroup(self,Â group) Set the force group this Force belongs to. setMapParameters(self,Â index,Â size,Â energy) Set the energy values of a map. setName(self,Â name) Set the name of this Force. setTorsionParameters(self,Â index,Â map,Â a1,Â â¦) Set the force field parameters for a CMAP torsion term. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the map and torsion parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumMaps(self) → intÂ¶ Get the number of maps that have been defined. getNumTorsions(self) → intÂ¶ Get the number of CMAP torsion terms in the potential function addMap(self, size, energy) → intÂ¶ Create a new map that can be used for torsion pairs. Parameters size (int) â the size of the map along each dimension energy (vector< double >) â the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size. Returns the index of the map that was added Return type int getMapParameters(self, index)Â¶ Get the energy values of a map. Parameters index (int) â the index of the map for which to get energy values Returns size (int) â the size of the map along each dimension energy (vector< double >) â the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size. setMapParameters(self, index, size, energy)Â¶ Set the energy values of a map. Parameters index (int) â the index of the map for which to set energy values size (int) â the size of the map along each dimension energy (vector< double >) â the energy values for the map. This must be of length size*size. The element energy[i+size*j] contains the energy when the first torsion angle equals i*2*PI/size and the second torsion angle equals j*2*PI/size. addTorsion(self, map, a1, a2, a3, a4, b1, b2, b3, b4) → intÂ¶ Add a CMAP torsion term to the force field. Parameters map (int) â the index of the map to use for this term a1 (int) â the index of the first particle forming the first torsion a2 (int) â the index of the second particle forming the first torsion a3 (int) â the index of the third particle forming the first torsion a4 (int) â the index of the fourth particle forming the first torsion b1 (int) â the index of the first particle forming the second torsion b2 (int) â the index of the second particle forming the second torsion b3 (int) â the index of the third particle forming the second torsion b4 (int) â the index of the fourth particle forming the second torsion Returns the index of the torsion that was added Return type int getTorsionParameters(self, index)Â¶ Get the force field parameters for a CMAP torsion term. Parameters index (int) â the index of the torsion for which to get parameters Returns map (int) â the index of the map to use for this term a1 (int) â the index of the first particle forming the first torsion a2 (int) â the index of the second particle forming the first torsion a3 (int) â the index of the third particle forming the first torsion a4 (int) â the index of the fourth particle forming the first torsion b1 (int) â the index of the first particle forming the second torsion b2 (int) â the index of the second particle forming the second torsion b3 (int) â the index of the third particle forming the second torsion b4 (int) â the index of the fourth particle forming the second torsion setTorsionParameters(self, index, map, a1, a2, a3, a4, b1, b2, b3, b4)Â¶ Set the force field parameters for a CMAP torsion term. Parameters index (int) â the index of the torsion for which to set parameters map (int) â the index of the map to use for this term a1 (int) â the index of the first particle forming the first torsion a2 (int) â the index of the second particle forming the first torsion a3 (int) â the index of the third particle forming the first torsion a4 (int) â the index of the fourth particle forming the first torsion b1 (int) â the index of the first particle forming the second torsion b2 (int) â the index of the second particle forming the second torsion b3 (int) â the index of the third particle forming the second torsion b4 (int) â the index of the fourth particle forming the second torsion updateParametersInContext(self, context)Â¶ Update the map and torsion parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setMapParameters() and setTorsionParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information that can be updated with this method is the energy values for a map, and the map index for a torsion. The size of a map and the set of particles involved in a torsion cannot be changed. Also, new bonds and torsions cannot be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.