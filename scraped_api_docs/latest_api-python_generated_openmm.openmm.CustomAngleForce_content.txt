CustomAngleForceÂ¶ class openmm.openmm.CustomAngleForce(*args)Â¶ This class implements interactions between sets of three particles that depend on the angle between them. Unlike HarmonicAngleForce, the functional form of the interaction is completely customizable, and may involve arbitrary algebraic expressions. In addition to the angle formed by the particles, it may depend on arbitrary global and per-angle parameters. To use this class, create a CustomAngleForce object, passing an algebraic expression to the constructor that defines the interaction energy between each set of particles. The expression may depend on theta, the angle formed by the particles, as well as on any parameters you choose. Then call addPerAngleParameter() to define per-angle parameters, and addGlobalParameter() to define global parameters. The values of per-angle parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling Context::setParameter(). Finally, call addAngle() once for each angle. After an angle has been added, you can modify its parameters by calling setAngleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). As an example, the following code creates a CustomAngleForce that implements a harmonic potential: CustomAngleForce* force = new CustomAngleForce("0.5*k*(theta-theta0)^2"); This force depends on two parameters: the spring constant k and equilibrium angle theta0. The following code defines these parameters: force->addPerAngleParameter("k"); force->addPerAngleParameter("theta0"); This class also has the ability to compute derivatives of the potential energy with respect to global parameters. Call addEnergyParameterDerivative() to request that the derivative with respect to a particular parameter be computed. You can then query its value in a Context by calling getState() on it. Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. __init__(self, energy) → CustomAngleForceÂ¶ __init__(self, other) → CustomAngleForce Create a CustomAngleForce. Parameters energy (string) â an algebraic expression giving the interaction energy between three particles as a function of theta, the angle between them Methods __init__(->Â CustomAngleForce) Create a CustomAngleForce. addAngle(self,Â particle1,Â particle2,Â particle3) Add an angle term to the force field. addEnergyParameterDerivative(self,Â name) Request that this Force compute the derivative of its energy with respect to a global parameter. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that the interaction may depend on. addPerAngleParameter(self,Â name) Add a new per-angle parameter that the interaction may depend on. getAngleParameters(self,Â index) Get the force field parameters for an angle term. getEnergyFunction(self) Get the algebraic expression that gives the interaction energy for each angle getEnergyParameterDerivativeName(self,Â index) Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. getForceGroup(self) Get the force group this Force belongs to. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getName(self) Get the name of this Force. getNumAngles(self) Get the number of angles for which force field parameters have been defined. getNumEnergyParameterDerivatives(self) Get the number of global parameters with respect to which the derivative of the energy should be computed. getNumGlobalParameters(self) Get the number of global parameters that the interaction depends on. getNumPerAngleParameters(self) Get the number of per-angle parameters that the interaction depends on. getPerAngleParameterName(self,Â index) Get the name of a per-angle parameter. setAngleParameters(self,Â index,Â particle1,Â â¦) Set the force field parameters for an angle term. setEnergyFunction(self,Â energy) Set the algebraic expression that gives the interaction energy for each angle setForceGroup(self,Â group) Set the force group this Force belongs to. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setName(self,Â name) Set the name of this Force. setPerAngleParameterName(self,Â index,Â name) Set the name of a per-angle parameter. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-angle parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumAngles(self) → intÂ¶ Get the number of angles for which force field parameters have been defined. getNumPerAngleParameters(self) → intÂ¶ Get the number of per-angle parameters that the interaction depends on. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that the interaction depends on. getNumEnergyParameterDerivatives(self) → intÂ¶ Get the number of global parameters with respect to which the derivative of the energy should be computed. getEnergyFunction(self) → std::string const &Â¶ Get the algebraic expression that gives the interaction energy for each angle setEnergyFunction(self, energy)Â¶ Set the algebraic expression that gives the interaction energy for each angle addPerAngleParameter(self, name) → intÂ¶ Add a new per-angle parameter that the interaction may depend on. Parameters name (string) â the name of the parameter Returns the index of the parameter that was added Return type int getPerAngleParameterName(self, index) → std::string const &Â¶ Get the name of a per-angle parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setPerAngleParameterName(self, index, name)Â¶ Set the name of a per-angle parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addEnergyParameterDerivative(self, name)Â¶ Request that this Force compute the derivative of its energy with respect to a global parameter. The parameter must have already been added with addGlobalParameter(). Parameters name (string) â the name of the parameter getEnergyParameterDerivativeName(self, index) → std::string const &Â¶ Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. Parameters index (int) â the index of the parameter derivative, between 0 and getNumEnergyParameterDerivatives() Returns the parameter name Return type string addAngle(self, particle1, particle2, particle3, parameters=std::vector< double >()) → intÂ¶ Add an angle term to the force field. Parameters particle1 (int) â the index of the first particle connected by the angle particle2 (int) â the index of the second particle connected by the angle particle3 (int) â the index of the third particle connected by the angle parameters (vector< double >) â the list of parameters for the new angle Returns the index of the angle that was added Return type int getAngleParameters(self, index)Â¶ Get the force field parameters for an angle term. Parameters index (int) â the index of the angle for which to get parameters Returns particle1 (int) â the index of the first particle connected by the angle particle2 (int) â the index of the second particle connected by the angle particle3 (int) â the index of the third particle connected by the angle parameters (vector< double >) â the list of parameters for the angle setAngleParameters(self, index, particle1, particle2, particle3, parameters=std::vector< double >())Â¶ Set the force field parameters for an angle term. Parameters index (int) â the index of the angle for which to set parameters particle1 (int) â the index of the first particle connected by the angle particle2 (int) â the index of the second particle connected by the angle particle3 (int) â the index of the third particle connected by the angle parameters (vector< double >) â the list of parameters for the angle updateParametersInContext(self, context)Â¶ Update the per-angle parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setAngleParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the values of per-angle parameters. All other aspects of the Force (such as the energy function) are unaffected and can only be changed by reinitializing the Context. The set of particles involved in a angle cannot be changed, nor can new angles be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.