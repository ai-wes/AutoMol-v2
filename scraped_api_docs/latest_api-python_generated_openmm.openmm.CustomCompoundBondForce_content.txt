CustomCompoundBondForceÂ¶ class openmm.openmm.CustomCompoundBondForce(*args)Â¶ This class supports a wide variety of bonded interactions. It defines a âbondâ as a single energy term that depends on the positions of a fixed set of particles. The number of particles involved in a bond, and how the energy depends on their positions, is configurable. It may depend on the positions of individual particles, the distances between pairs of particles, the angles formed by sets of three particles, and the dihedral angles formed by sets of four particles. We refer to the particles in a bond as p1, p2, p3, etc. For each bond, CustomCompoundBondForce evaluates a user supplied algebraic expression to determine the interaction energy. The expression may depend on the following variables and functions: x1, y1, z1, x2, y2, z2, etc.: The x, y, and z coordinates of the particle positions. For example, x1 is the x coordinate of particle p1, and y3 is the y coordinate of particle p3. distance(p1, p2): the distance between particles p1 and p2 (where âp1â and âp2â may be replaced by the names of whichever particles you want to calculate the distance between). angle(p1, p2, p3): the angle formed by the three specified particles. dihedral(p1, p2, p3, p4): the dihedral angle formed by the four specified particles, guaranteed to be in the range [-pi,+pi]. The expression also may involve tabulated functions, and may depend on arbitrary global and per-bond parameters. To use this class, create a CustomCompoundBondForce object, passing an algebraic expression to the constructor that defines the interaction energy of each bond. Then call addPerBondParameter() to define per-bond parameters and addGlobalParameter() to define global parameters. The values of per-bond parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling Context::setParameter(). Next, call addBond() to define bonds and specify their parameter values. After a bond has been added, you can modify its parameters by calling setBondParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). As an example, the following code creates a CustomCompoundBondForce that implements a Urey-Bradley potential. This is an interaction between three particles that depends on the angle formed by p1-p2-p3, and on the distance between p1 and p3. CustomCompoundBondForce* force = new CustomCompoundBondForce(3, "0.5*(kangle*(angle(p1,p2,p3)-theta0)^2+kbond*(distance(p1,p3)-r0)^2)"); This force depends on four parameters: kangle, kbond, theta0, and r0. The following code defines these as per-bond parameters: force->addPerBondParameter("kangle"); force->addPerBondParameter("kbond"); force->addPerBondParameter("theta0"); force->addPerBondParameter("r0"); This class also has the ability to compute derivatives of the potential energy with respect to global parameters. Call addEnergyParameterDerivative() to request that the derivative with respect to a particular parameter be computed. You can then query its value in a Context by calling getState() on it. Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. This class also supports the functions pointdistance(x1, y1, z1, x2, y2, z2), pointangle(x1, y1, z1, x2, y2, z2, x3, y3, z3), and pointdihedral(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4). These functions are similar to distance(), angle(), and dihedral(), but the arguments are the coordinates of points to perform the calculation based on rather than the names of particles. This enables more flexible geometric calculations. For example, the following computes the distance from particle p1 to the midpoint between particles p2 and p3. CustomCompoundBondForce* force = new CustomCompoundBondForce(3, "pointdistance(x1, y1, z1, (x2+x3)/2, (y2+y3)/2, (z2+z3)/2)"); In addition, you can call addTabulatedFunction() to define a new function based on tabulated values. You specify the function by creating a TabulatedFunction object. That function can then appear in the expression. __init__(self, numParticles, energy) → CustomCompoundBondForceÂ¶ __init__(self, other) → CustomCompoundBondForce Create a CustomCompoundBondForce. Parameters numParticles (int) â the number of particles used to define each bond energy (string) â an algebraic expression giving the interaction energy of each bond as a function of particle positions, inter-particle distances, angles, and dihedrals, and any global and per-bond parameters Methods __init__(->Â CustomCompoundBondForce) Create a CustomCompoundBondForce. addBond(self,Â particles[,Â parameters]) Add a bond to the force addEnergyParameterDerivative(self,Â name) Request that this Force compute the derivative of its energy with respect to a global parameter. addFunction(self,Â name,Â values,Â min,Â max) Add a tabulated function that may appear in the energy expression. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that the interaction may depend on. addPerBondParameter(self,Â name) Add a new per-bond parameter that the interaction may depend on. addTabulatedFunction(self,Â name,Â function) Add a tabulated function that may appear in the energy expression. getBondParameters(self,Â index) Get the properties of a bond. getEnergyFunction(self) Get the algebraic expression that gives the interaction energy of each bond getEnergyParameterDerivativeName(self,Â index) Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. getForceGroup(self) Get the force group this Force belongs to. getFunctionParameters(self,Â index) Get the parameters for a tabulated function that may appear in the energy expression. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getName(self) Get the name of this Force. getNumBonds(self) Get the number of bonds for which force field parameters have been defined. getNumEnergyParameterDerivatives(self) Get the number of global parameters with respect to which the derivative of the energy should be computed. getNumFunctions(self) Get the number of tabulated functions that have been defined. getNumGlobalParameters(self) Get the number of global parameters that the interaction depends on. getNumParticlesPerBond(self) Get the number of particles used to define each bond. getNumPerBondParameters(self) Get the number of per-bond parameters that the interaction depends on. getNumTabulatedFunctions(self) Get the number of tabulated functions that have been defined. getPerBondParameterName(self,Â index) Get the name of a per-bond parameter. getTabulatedFunction(->Â TabulatedFunction) Get a reference to a tabulated function that may appear in the energy expression. getTabulatedFunctionName(self,Â index) Get the name of a tabulated function that may appear in the energy expression. setBondParameters(self,Â index,Â particles[,Â â¦]) Set the properties of a bond. setEnergyFunction(self,Â energy) Set the algebraic expression that gives the interaction energy of each bond setForceGroup(self,Â group) Set the force group this Force belongs to. setFunctionParameters(self,Â index,Â name,Â â¦) Set the parameters for a tabulated function that may appear in the energy expression. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setName(self,Â name) Set the name of this Force. setPerBondParameterName(self,Â index,Â name) Set the name of a per-bond parameter. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-bond parameters and tabulated functions in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumParticlesPerBond(self) → intÂ¶ Get the number of particles used to define each bond. getNumBonds(self) → intÂ¶ Get the number of bonds for which force field parameters have been defined. getNumPerBondParameters(self) → intÂ¶ Get the number of per-bond parameters that the interaction depends on. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that the interaction depends on. getNumEnergyParameterDerivatives(self) → intÂ¶ Get the number of global parameters with respect to which the derivative of the energy should be computed. getNumTabulatedFunctions(self) → intÂ¶ Get the number of tabulated functions that have been defined. getNumFunctions(self) → intÂ¶ Get the number of tabulated functions that have been defined. Deprecated This method exists only for backward compatibility. Use getNumTabulatedFunctions() instead. getEnergyFunction(self) → std::string const &Â¶ Get the algebraic expression that gives the interaction energy of each bond setEnergyFunction(self, energy)Â¶ Set the algebraic expression that gives the interaction energy of each bond addPerBondParameter(self, name) → intÂ¶ Add a new per-bond parameter that the interaction may depend on. Parameters name (string) â the name of the parameter Returns the index of the parameter that was added Return type int getPerBondParameterName(self, index) → std::string const &Â¶ Get the name of a per-bond parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setPerBondParameterName(self, index, name)Â¶ Set the name of a per-bond parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addEnergyParameterDerivative(self, name)Â¶ Request that this Force compute the derivative of its energy with respect to a global parameter. The parameter must have already been added with addGlobalParameter(). Parameters name (string) â the name of the parameter getEnergyParameterDerivativeName(self, index) → std::string const &Â¶ Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. Parameters index (int) â the index of the parameter derivative, between 0 and getNumEnergyParameterDerivatives() Returns the parameter name Return type string addBond(self, particles, parameters=std::vector< double >()) → intÂ¶ Add a bond to the force Parameters particles (vector< int >) â the indices of the particles the bond depends on parameters (vector< double >) â the list of per-bond parameter values for the new bond Returns the index of the bond that was added Return type int getBondParameters(self, index)Â¶ Get the properties of a bond. Parameters index (int) â the index of the bond to get Returns particles (vector< int >) â the indices of the particles in the bond parameters (vector< double >) â the list of per-bond parameter values for the bond setBondParameters(self, index, particles, parameters=std::vector< double >())Â¶ Set the properties of a bond. Parameters index (int) â the index of the bond to set particles (vector< int >) â the indices of the particles in the bond parameters (vector< double >) â the list of per-bond parameter values for the bond addTabulatedFunction(self, name, function) → intÂ¶ Add a tabulated function that may appear in the energy expression. Parameters name (string) â the name of the function as it appears in expressions function (TabulatedFunction *) â a TabulatedFunction object defining the function. The TabulatedFunction should have been created on the heap with the ânewâ operator. The Force takes over ownership of it, and deletes it when the Force itself is deleted. Returns the index of the function that was added Return type int getTabulatedFunction(self, index) → TabulatedFunctionÂ¶ getTabulatedFunction(self, index) → TabulatedFunction Get a reference to a tabulated function that may appear in the energy expression. Parameters index (int) â the index of the function to get Returns the TabulatedFunction object defining the function Return type TabulatedFunction getTabulatedFunctionName(self, index) → std::string const &Â¶ Get the name of a tabulated function that may appear in the energy expression. Parameters index (int) â the index of the function to get Returns the name of the function as it appears in expressions Return type string addFunction(self, name, values, min, max) → intÂ¶ Add a tabulated function that may appear in the energy expression. Deprecated This method exists only for backward compatibility. Use addTabulatedFunction() instead. getFunctionParameters(self, index)Â¶ Get the parameters for a tabulated function that may appear in the energy expression. Deprecated This method exists only for backward compatibility. Call getFunctionParameters() on the TabulatedFunction object instead. If the specified function is not a Continuous1DFunction, this throws an exception. setFunctionParameters(self, index, name, values, min, max)Â¶ Set the parameters for a tabulated function that may appear in the energy expression. Deprecated This method exists only for backward compatibility. Call setFunctionParameters() on the TabulatedFunction object instead. If the specified function is not a Continuous1DFunction, this throws an exception. updateParametersInContext(self, context)Â¶ Update the per-bond parameters and tabulated functions in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setBondParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the values of per-bond parameters and tabulated functions. All other aspects of the Force (such as the energy function) are unaffected and can only be changed by reinitializing the Context. The set of particles involved in a bond cannot be changed, nor can new bonds be added. Also, while the tabulated values of a function can change, everything else about it (its dimensions, the data range) must not be changed. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.