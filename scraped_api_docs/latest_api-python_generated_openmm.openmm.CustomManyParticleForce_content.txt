CustomManyParticleForceÂ¶ class openmm.openmm.CustomManyParticleForce(*args)Â¶ This class supports a wide variety of nonbonded N-particle interactions, where N is user specified. The interaction energy is determined by an arbitrary, user specified algebraic expression that is evaluated for every possible set of N particles in the system. It may depend on the positions of the individual particles, the distances between pairs of particles, the angles formed by sets of three particles, and the dihedral angles formed by sets of four particles. Be aware that the cost of evaluating an N-particle interaction increases very rapidly with N. Values larger than N=3 are rarely used. We refer to a set of particles for which the energy is being evaluated as p1, p2, p3, etc. The energy expression may depend on the following variables and functions: x1, y1, z1, x2, y2, z2, etc.: The x, y, and z coordinates of the particle positions. For example, x1 is the x coordinate of particle p1, and y3 is the y coordinate of particle p3. distance(p1, p2): the distance between particles p1 and p2 (where âp1â and âp2â may be replaced by the names of whichever particles you want to calculate the distance between). angle(p1, p2, p3): the angle formed by the three specified particles. dihedral(p1, p2, p3, p4): the dihedral angle formed by the four specified particles. arbitrary global and per-particle parameters that you define. To use this class, create a CustomManyParticleForce object, passing an algebraic expression to the constructor that defines the interaction energy of each set of particles. Then call addPerParticleParameter() to define per-particle parameters, and addGlobalParameter() to define global parameters. The values of per-particle parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling Context::setParameter(). Next, call addParticle() once for each particle in the System to set the values of its per-particle parameters. The number of particles for which you set parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its parameters by calling setParticleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). Multi-particle interactions can be very expensive to evaluate, so they are usually used with a cutoff distance. The exact interpretation of the cutoff depends on the permutation mode, as discussed below. CustomManyParticleForce also lets you specify âexclusionsâ, particular pairs of particles whose interactions should be omitted from force and energy calculations. This is most often used for particles that are bonded to each other. If you specify a pair of particles as an exclusion, _all_ sets that include those two particles will be omitted. As an example, the following code creates a CustomManyParticleForce that implements an Axilrod-Teller potential. This is an interaction between three particles that depends on all three distances and angles formed by the particles. CustomManyParticleForce* force = new CustomManyParticleForce(3, "C*(1+3*cos(theta1)*cos(theta2)*cos(theta3))/(r12*r13*r23)^3;" "theta1=angle(p1,p2,p3); theta2=angle(p2,p3,p1); theta3=angle(p3,p1,p2);" "r12=distance(p1,p2); r13=distance(p1,p3); r23=distance(p2,p3)"); force->setPermutationMode(CustomManyParticleForce::SinglePermutation); This force depends on one parameter, C. The following code defines it as a global parameter: force->addGlobalParameter("C", 1.0); Notice that the expression is symmetric with respect to the particles. It only depends on the products cos(theta1)*cos(theta2)*cos(theta3) and r12*r13*r23, both of which are unchanged if the labels p1, p2, and p3 are permuted. This is required because we specified SinglePermutation as the permutation mode. (This is the default, so we did not really need to set it, but doing so makes the example clearer.) In this mode, the expression is only evaluated once for each set of particles. No guarantee is made about which particle will be identified as p1, p2, etc. Therefore, the energy _must_ be symmetric with respect to exchange of particles. Otherwise, the results would be undefined because permuting the labels would change the energy. Not all many-particle interactions work this way. Another common pattern is for the expression to describe an interaction between one central particle and other nearby particles. An example of this is the 3-particle piece of the Stillinger-Weber potential: CustomManyParticleForce* force = new CustomManyParticleForce(3, "L*eps*(cos(theta1)+1/3)^2*exp(sigma*gamma/(r12-a*sigma))*exp(sigma*gamma/(r13-a*sigma));" "r12 = distance(p1,p2); r13 = distance(p1,p3); theta1 = angle(p3,p1,p2)"); force->setPermutationMode(CustomManyParticleForce::UniqueCentralParticle); When the permutation mode is set to UniqueCentralParticle, particle p1 is treated as the central particle. For a set of N particles, the expression is evaluated N times, once with each particle as p1. The expression can therefore treat p1 differently from the other particles. Notice that it is still symmetric with respect to p2 and p3, however. There is no guarantee about how those labels will be assigned to particles. Distance cutoffs are applied in different ways depending on the permutation mode. In SinglePermutation mode, every particle in the set must be within the cutoff distance of every other particle. If _any_ two particles are further apart than the cutoff distance, the interaction is skipped. In UniqueCentralParticle mode, each particle must be within the cutoff distance of the central particle, but not necessarily of all the other particles. The cutoff may therefore exclude a subset of the permutations of a set of particles. Another common situation is that some particles are fundamentally different from others, causing the expression to be inherently non-symmetric. An example would be a water model that involves three particles, two of which _must_ be hydrogen and one of which _must_ be oxygen. Cases like this can be implemented using particle types. A particle type is an integer that you specify when you call addParticle(). (If you omit the argument, it defaults to 0.) For the water model, you could specify 0 for all oxygen atoms and 1 for all hydrogen atoms. You can then call setTypeFilter() to specify the list of allowed types for each of the N particles involved in an interaction: set&lt;int&gt; oxygenTypes, hydrogenTypes; oxygenTypes.insert(0); hydrogenTypes.insert(1); force->setTypeFilter(0, oxygenTypes); force->setTypeFilter(1, hydrogenTypes); force->setTypeFilter(2, hydrogenTypes); This specifies that of the three particles in an interaction, p1 must be oxygen while p2 and p3 must be hydrogen. The energy expression will only be evaluated for triplets of particles that satisfy those requirements. It will still only be evaluated once for each triplet, so it must still be symmetric with respect to p2 and p3. Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. The names of per-particle parameters have the suffix â1â, â2â, etc. appended to them to indicate the values for the multiple interacting particles. For example, if you define a per-particle parameter called âchargeâ, then the variable âcharge2â is the charge of particle p2. As seen above, the expression may also involve intermediate quantities that are defined following the main expression, using â;â as a separator. This class also supports the functions pointdistance(x1, y1, z1, x2, y2, z2), pointangle(x1, y1, z1, x2, y2, z2, x3, y3, z3), and pointdihedral(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4). These functions are similar to distance(), angle(), and dihedral(), but the arguments are the coordinates of points to perform the calculation based on rather than the names of particles. This enables more flexible geometric calculations. For example, the following computes the distance from particle p1 to the midpoint between particles p2 and p3. CustomManyParticleForce* force = new CustomManyParticleForce(3, "pointdistance(x1, y1, z1, (x2+x3)/2, (y2+y3)/2, (z2+z3)/2)"); In addition, you can call addTabulatedFunction() to define a new function based on tabulated values. You specify the function by creating a TabulatedFunction object. That function can then appear in the expression. __init__(self, particlesPerSet, energy) → CustomManyParticleForceÂ¶ __init__(self, other) → CustomManyParticleForce Create a CustomManyParticleForce. Parameters particlesPerSet (int) â the number of particles in each set for which the energy is evaluated energy (string) â an algebraic expression giving the interaction energy of each triplet as a function of particle positions, inter-particle distances, angles, and any global and per-particle parameters Methods __init__(->Â CustomManyParticleForce) Create a CustomManyParticleForce. addExclusion(self,Â particle1,Â particle2) Add a particle pair to the list of interactions that should be excluded. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that the interaction may depend on. addParticle(self[,Â parameters,Â type]) Add the nonbonded force parameters for a particle. addPerParticleParameter(self,Â name) Add a new per-particle parameter that the interaction may depend on. addTabulatedFunction(self,Â name,Â function) Add a tabulated function that may appear in the energy expression. createExclusionsFromBonds(self,Â bonds,Â â¦) Identify exclusions based on the molecular topology. getCutoffDistance(self) Get the cutoff distance (in nm) being used for nonbonded interactions. getEnergyFunction(self) Get the algebraic expression that gives the interaction energy of each bond getExclusionParticles(self,Â index) Get the particles in a pair whose interaction should be excluded. getForceGroup(self) Get the force group this Force belongs to. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getName(self) Get the name of this Force. getNonbondedMethod(self) Get the method used for handling long range nonbonded interactions. getNumExclusions(self) Get the number of particle pairs whose interactions should be excluded. getNumGlobalParameters(self) Get the number of global parameters that the interaction depends on. getNumParticles(self) Get the number of particles for which force field parameters have been defined. getNumParticlesPerSet(self) Get the number of particles in each set for which the energy is evaluated getNumPerParticleParameters(self) Get the number of per-particle parameters that the interaction depends on. getNumTabulatedFunctions(self) Get the number of tabulated functions that have been defined. getParticleParameters(self,Â index) Get the nonbonded force parameters for a particle. getPerParticleParameterName(self,Â index) Get the name of a per-particle parameter. getPermutationMode(self) Get the mode that selects which permutations of a set of particles to evaluate the interaction for. getTabulatedFunction(->Â TabulatedFunction) Get a reference to a tabulated function that may appear in the energy expression. getTabulatedFunctionName(self,Â index) Get the name of a tabulated function that may appear in the energy expression. getTypeFilter(self,Â index) Get the allowed particle types for one of the particles involved in the interaction. setCutoffDistance(self,Â distance) Set the cutoff distance (in nm) being used for nonbonded interactions. setEnergyFunction(self,Â energy) Set the algebraic expression that gives the interaction energy of each bond setExclusionParticles(self,Â index,Â â¦) Set the particles in a pair whose interaction should be excluded. setForceGroup(self,Â group) Set the force group this Force belongs to. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setName(self,Â name) Set the name of this Force. setNonbondedMethod(self,Â method) Set the method used for handling long range nonbonded interactions. setParticleParameters(self,Â index,Â â¦) Set the nonbonded force parameters for a particle. setPerParticleParameterName(self,Â index,Â name) Set the name of a per-particle parameter. setPermutationMode(self,Â mode) Set the mode that selects which permutations of a set of particles to evaluate the interaction for. setTypeFilter(self,Â index,Â types) Set the allowed particle types for one of the particles involved in the interaction. updateParametersInContext(self,Â context) Update the per-particle parameters and tabulated functions in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes CutoffNonPeriodic CutoffPeriodic NoCutoff SinglePermutation UniqueCentralParticle thisown The membership flag property thisownÂ¶ The membership flag getNumParticlesPerSet(self) → intÂ¶ Get the number of particles in each set for which the energy is evaluated getNumParticles(self) → intÂ¶ Get the number of particles for which force field parameters have been defined. getNumExclusions(self) → intÂ¶ Get the number of particle pairs whose interactions should be excluded. getNumPerParticleParameters(self) → intÂ¶ Get the number of per-particle parameters that the interaction depends on. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that the interaction depends on. getNumTabulatedFunctions(self) → intÂ¶ Get the number of tabulated functions that have been defined. getEnergyFunction(self) → std::string const &Â¶ Get the algebraic expression that gives the interaction energy of each bond setEnergyFunction(self, energy)Â¶ Set the algebraic expression that gives the interaction energy of each bond getNonbondedMethod(self) → OpenMM::CustomManyParticleForce::NonbondedMethodÂ¶ Get the method used for handling long range nonbonded interactions. setNonbondedMethod(self, method)Â¶ Set the method used for handling long range nonbonded interactions. getPermutationMode(self) → OpenMM::CustomManyParticleForce::PermutationModeÂ¶ Get the mode that selects which permutations of a set of particles to evaluate the interaction for. setPermutationMode(self, mode)Â¶ Set the mode that selects which permutations of a set of particles to evaluate the interaction for. getCutoffDistance(self) → doubleÂ¶ Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Returns the cutoff distance, measured in nm Return type double setCutoffDistance(self, distance)Â¶ Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Parameters distance (double) â the cutoff distance, measured in nm addPerParticleParameter(self, name) → intÂ¶ Add a new per-particle parameter that the interaction may depend on. Parameters name (string) â the name of the parameter Returns the index of the parameter that was added Return type int getPerParticleParameterName(self, index) → std::string const &Â¶ Get the name of a per-particle parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setPerParticleParameterName(self, index, name)Â¶ Set the name of a per-particle parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addParticle(self, parameters=std::vector< double >(), type=0) → intÂ¶ Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the iâth time, it specifies the parameters for the iâth particle. Parameters parameters (vector< double >) â the list of parameters for the new particle type (int) â the type of the new particle Returns the index of the particle that was added Return type int getParticleParameters(self, index)Â¶ Get the nonbonded force parameters for a particle. Parameters index (int) â the index of the particle for which to get parameters Returns parameters (vector< double >) â the list of parameters for the specified particle type (int) â the type of the specified particle setParticleParameters(self, index, parameters, type)Â¶ Set the nonbonded force parameters for a particle. Parameters index (int) â the index of the particle for which to set parameters parameters (vector< double >) â the list of parameters for the specified particle type (int) â the type of the specified particle addExclusion(self, particle1, particle2) → intÂ¶ Add a particle pair to the list of interactions that should be excluded. In many cases, you can use createExclusionsFromBonds() rather than adding each exclusion explicitly. Parameters particle1 (int) â the index of the first particle in the pair particle2 (int) â the index of the second particle in the pair Returns the index of the exclusion that was added Return type int getExclusionParticles(self, index)Â¶ Get the particles in a pair whose interaction should be excluded. Parameters index (int) â the index of the exclusion for which to get particle indices Returns particle1 (int) â the index of the first particle in the pair particle2 (int) â the index of the second particle in the pair setExclusionParticles(self, index, particle1, particle2)Â¶ Set the particles in a pair whose interaction should be excluded. Parameters index (int) â the index of the exclusion for which to set particle indices particle1 (int) â the index of the first particle in the pair particle2 (int) â the index of the second particle in the pair createExclusionsFromBonds(self, bonds, bondCutoff)Â¶ Identify exclusions based on the molecular topology. Particles which are separated by up to a specified number of bonds are added as exclusions. Parameters bonds (vector< std::pair< int, int > >) â the set of bonds based on which to construct exclusions. Each element specifies the indices of two particles that are bonded to each other. bondCutoff (int) â pairs of particles that are separated by this many bonds or fewer are added to the list of exclusions getTypeFilter(self, index)Â¶ Get the allowed particle types for one of the particles involved in the interaction. If this an empty set (the default), no filter is applied and all interactions are evaluated regardless of the type of the specified particle. Parameters index (int) â the index of the particle within the interaction (between 0 and getNumParticlesPerSet()) Returns types â the allowed types for the specified particle Return type set< int > setTypeFilter(self, index, types)Â¶ Set the allowed particle types for one of the particles involved in the interaction. If this an empty set (the default), no filter is applied and all interactions are evaluated regardless of the type of the specified particle. Parameters index (int) â the index of the particle within the interaction (between 0 and getNumParticlesPerSet()) types (set< int >) â the allowed types for the specified particle addTabulatedFunction(self, name, function) → intÂ¶ Add a tabulated function that may appear in the energy expression. Parameters name (string) â the name of the function as it appears in expressions function (TabulatedFunction *) â a TabulatedFunction object defining the function. The TabulatedFunction should have been created on the heap with the ânewâ operator. The Force takes over ownership of it, and deletes it when the Force itself is deleted. Returns the index of the function that was added Return type int getTabulatedFunction(self, index) → TabulatedFunctionÂ¶ getTabulatedFunction(self, index) → TabulatedFunction Get a reference to a tabulated function that may appear in the energy expression. Parameters index (int) â the index of the function to get Returns the TabulatedFunction object defining the function Return type TabulatedFunction getTabulatedFunctionName(self, index) → std::string const &Â¶ Get the name of a tabulated function that may appear in the energy expression. Parameters index (int) â the index of the function to get Returns the name of the function as it appears in expressions Return type string updateParametersInContext(self, context)Â¶ Update the per-particle parameters and tabulated functions in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setParticleParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the values of per-particle parameters and tabulated functions. All other aspects of the Force (the energy function, nonbonded method, cutoff distance, etc.) are unaffected and can only be changed by reinitializing the Context. Also, this method cannot be used to add new particles, only to change the parameters of existing ones. While the tabulated values of a function can change, everything else about it (its dimensions, the data range) must not be changed. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.