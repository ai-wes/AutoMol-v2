CustomTorsionForceÂ¶ class openmm.openmm.CustomTorsionForce(*args)Â¶ This class implements interactions between sets of four particles that depend on the torsion angle between them. Unlike PeriodicTorsionForce, the functional form of the interaction is completely customizable, and may involve arbitrary algebraic expressions. In addition to the angle formed by the particles, it may depend on arbitrary global and per-torsion parameters. To use this class, create a CustomTorsionForce object, passing an algebraic expression to the constructor that defines the interaction energy between each set of particles. The expression may depend on theta, the torsion angle formed by the particles, as well as on any parameters you choose. Then call addPerTorsionParameter() to define per-torsion parameters, and addGlobalParameter() to define global parameters. The values of per-torsion parameters are specified as part of the system definition, while values of global parameters may be modified during a simulation by calling Context::setParameter(). Finally, call addTorsion() once for each torsion. After an torsion has been added, you can modify its parameters by calling setTorsionParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). Note that theta is guaranteed to be in the range [-pi,+pi], which may cause issues with force discontinuities if the energy function does not respect this domain. As an example, the following code creates a CustomTorsionForce that implements a periodic potential: CustomTorsionForce* force = new CustomTorsionForce("0.5*k*(1-cos(theta-theta0))"); This force depends on two parameters: the spring constant k and equilibrium angle theta0. The following code defines these parameters: force->addPerTorsionParameter("k"); force->addPerTorsionParameter("theta0"); If a harmonic restraint is desired, it is important to be careful of the domain for theta, using an idiom like this: CustomTorsionForce* force = new CustomTorsionForce("0.5*k*min(dtheta, 2*pi-dtheta)^2; dtheta = abs(theta-theta0); pi = 3.1415926535"); This class also has the ability to compute derivatives of the potential energy with respect to global parameters. Call addEnergyParameterDerivative() to request that the derivative with respect to a particular parameter be computed. You can then query its value in a Context by calling getState() on it. Expressions may involve the operators + (add), - (subtract), * (multiply), / (divide), and ^ (power), and the following functions: sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, atan2, sinh, cosh, tanh, erf, erfc, min, max, abs, floor, ceil, step, delta, select. All trigonometric functions are defined in radians, and log is the natural logarithm. step(x) = 0 if x is less than 0, 1 otherwise. delta(x) = 1 if x is 0, 0 otherwise. select(x,y,z) = z if x = 0, y otherwise. __init__(self, energy) → CustomTorsionForceÂ¶ __init__(self, other) → CustomTorsionForce Create a CustomTorsionForce. Parameters energy (string) â an algebraic expression giving the interaction energy between three particles as a function of theta, the torsion angle between them Methods __init__(->Â CustomTorsionForce) Create a CustomTorsionForce. addEnergyParameterDerivative(self,Â name) Request that this Force compute the derivative of its energy with respect to a global parameter. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that the interaction may depend on. addPerTorsionParameter(self,Â name) Add a new per-torsion parameter that the interaction may depend on. addTorsion(self,Â particle1,Â particle2,Â â¦) Add a torsion term to the force field. getEnergyFunction(self) Get the algebraic expression that gives the interaction energy for each torsion getEnergyParameterDerivativeName(self,Â index) Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. getForceGroup(self) Get the force group this Force belongs to. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getName(self) Get the name of this Force. getNumEnergyParameterDerivatives(self) Get the number of global parameters with respect to which the derivative of the energy should be computed. getNumGlobalParameters(self) Get the number of global parameters that the interaction depends on. getNumPerTorsionParameters(self) Get the number of per-torsion parameters that the interaction depends on. getNumTorsions(self) Get the number of torsions for which force field parameters have been defined. getPerTorsionParameterName(self,Â index) Get the name of a per-torsion parameter. getTorsionParameters(self,Â index) Get the force field parameters for a torsion term. setEnergyFunction(self,Â energy) Set the algebraic expression that gives the interaction energy for each torsion setForceGroup(self,Â group) Set the force group this Force belongs to. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setName(self,Â name) Set the name of this Force. setPerTorsionParameterName(self,Â index,Â name) Set the name of a per-torsion parameter. setTorsionParameters(self,Â index,Â particle1,Â â¦) Set the force field parameters for a torsion term. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-torsion parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumTorsions(self) → intÂ¶ Get the number of torsions for which force field parameters have been defined. getNumPerTorsionParameters(self) → intÂ¶ Get the number of per-torsion parameters that the interaction depends on. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that the interaction depends on. getNumEnergyParameterDerivatives(self) → intÂ¶ Get the number of global parameters with respect to which the derivative of the energy should be computed. getEnergyFunction(self) → std::string const &Â¶ Get the algebraic expression that gives the interaction energy for each torsion setEnergyFunction(self, energy)Â¶ Set the algebraic expression that gives the interaction energy for each torsion addPerTorsionParameter(self, name) → intÂ¶ Add a new per-torsion parameter that the interaction may depend on. Parameters name (string) â the name of the parameter Returns the index of the parameter that was added Return type int getPerTorsionParameterName(self, index) → std::string const &Â¶ Get the name of a per-torsion parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setPerTorsionParameterName(self, index, name)Â¶ Set the name of a per-torsion parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that the interaction may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addEnergyParameterDerivative(self, name)Â¶ Request that this Force compute the derivative of its energy with respect to a global parameter. The parameter must have already been added with addGlobalParameter(). Parameters name (string) â the name of the parameter getEnergyParameterDerivativeName(self, index) → std::string const &Â¶ Get the name of a global parameter with respect to which this Force should compute the derivative of the energy. Parameters index (int) â the index of the parameter derivative, between 0 and getNumEnergyParameterDerivatives() Returns the parameter name Return type string addTorsion(self, particle1, particle2, particle3, particle4, parameters=std::vector< double >()) → intÂ¶ Add a torsion term to the force field. Parameters particle1 (int) â the index of the first particle connected by the torsion particle2 (int) â the index of the second particle connected by the torsion particle3 (int) â the index of the third particle connected by the torsion particle4 (int) â the index of the fourth particle connected by the torsion parameters (vector< double >) â the list of parameters for the new torsion Returns the index of the torsion that was added Return type int getTorsionParameters(self, index)Â¶ Get the force field parameters for a torsion term. Parameters index (int) â the index of the torsion for which to get parameters Returns particle1 (int) â the index of the first particle connected by the torsion particle2 (int) â the index of the second particle connected by the torsion particle3 (int) â the index of the third particle connected by the torsion particle4 (int) â the index of the fourth particle connected by the torsion parameters (vector< double >) â the list of parameters for the torsion setTorsionParameters(self, index, particle1, particle2, particle3, particle4, parameters=std::vector< double >())Â¶ Set the force field parameters for a torsion term. Parameters index (int) â the index of the torsion for which to set parameters particle1 (int) â the index of the first particle connected by the torsion particle2 (int) â the index of the second particle connected by the torsion particle3 (int) â the index of the third particle connected by the torsion particle4 (int) â the index of the fourth particle connected by the torsion parameters (vector< double >) â the list of parameters for the torsion updateParametersInContext(self, context)Â¶ Update the per-torsion parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setTorsionParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the values of per-torsion parameters. All other aspects of the Force (such as the energy function) are unaffected and can only be changed by reinitializing the Context. The set of particles involved in a torsion cannot be changed, nor can new torsions be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.