DrudeLangevinIntegratorÂ¶ class openmm.openmm.DrudeLangevinIntegrator(*args)Â¶ This Integrator simulates systems that include Drude particles. It applies two different Langevin thermostats to different parts of the system. The first is applied to ordinary particles (ones that are not part of a Drude particle pair), as well as to the center of mass of each Drude particle pair. A second thermostat, typically with a much lower temperature, is applied to the relative internal displacement of each pair. This integrator can optionally set an upper limit on how far any Drude particle is ever allowed to get from its parent particle. This can sometimes help to improve stability. The limit is enforced with a hard wall constraint. By default the limit is set to 0.02 nm. This Integrator requires the System to include a DrudeForce, which it uses to identify the Drude particles. __init__(self, temperature, frictionCoeff, drudeTemperature, drudeFrictionCoeff, stepSize) → DrudeLangevinIntegratorÂ¶ __init__(self, other) → DrudeLangevinIntegrator Create a DrudeLangevinIntegrator. Parameters temperature (double) â the temperature of the main heat bath (in Kelvin) frictionCoeff (double) â the friction coefficient which couples the system to the main heat bath (in inverse picoseconds) drudeTemperature (double) â the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin) drudeFrictionCoeff (double) â the friction coefficient which couples the system to the heat bath applied to internal coordinates of Drude particles (in inverse picoseconds) stepSize (double) â the step size with which to integrator the system (in picoseconds) Methods __init__(->Â DrudeLangevinIntegrator) Create a DrudeLangevinIntegrator. computeDrudeTemperature(self) Compute the instantaneous temperature of the Drude system, measured in Kelvin. computeSystemTemperature(self) Compute the instantaneous temperature of the System, measured in Kelvin. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getDrudeFriction(self) Get the friction coefficient which determines how strongly the internal coordinates of Drude particles are coupled to the heat bath (in inverse ps). getDrudeTemperature(self) Get the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). getFriction(self) Get the friction coefficient which determines how strongly the system is coupled to the main heat bath (in inverse ps). getIntegrationForceGroups(self) Get which force groups to use for integration. getMaxDrudeDistance(self) Get the maximum distance a Drude particle can ever move from its parent particle, measured in nm. getRandomNumberSeed(self) Get the random number seed. getStepSize(self) Get the size of each time step, in picoseconds. getTemperature(self) Get the temperature of the main heat bath (in Kelvin). setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setDrudeFriction(self,Â coeff) Set the friction coefficient which determines how strongly the internal coordinates of Drude particles are coupled to the heat bath (in inverse ps). setDrudeTemperature(self,Â temp) Set the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). setFriction(self,Â coeff) Set the friction coefficient which determines how strongly the system is coupled to the main heat bath (in inverse ps). setIntegrationForceGroups(groups) Set which force groups to use for integration. setMaxDrudeDistance(self,Â distance) Set the maximum distance a Drude particle can ever move from its parent particle, measured in nm. setRandomNumberSeed(self,Â seed) Set the random number seed. setStepSize(self,Â size) Set the size of each time step, in picoseconds. setTemperature(self,Â temp) Set the temperature of the main heat bath (in Kelvin). step(self,Â steps) Advance a simulation through time by taking a series of time steps. Attributes thisown The membership flag property thisownÂ¶ The membership flag getTemperature(self) → doubleÂ¶ Get the temperature of the main heat bath (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin Return type double setTemperature(self, temp)Â¶ Set the temperature of the main heat bath (in Kelvin). Parameters temp (double) â the temperature of the heat bath, measured in Kelvin getFriction(self) → doubleÂ¶ Get the friction coefficient which determines how strongly the system is coupled to the main heat bath (in inverse ps). Returns the friction coefficient, measured in 1/ps Return type double setFriction(self, coeff)Â¶ Set the friction coefficient which determines how strongly the system is coupled to the main heat bath (in inverse ps). Parameters coeff (double) â the friction coefficient, measured in 1/ps getDrudeFriction(self) → doubleÂ¶ Get the friction coefficient which determines how strongly the internal coordinates of Drude particles are coupled to the heat bath (in inverse ps). Returns the friction coefficient, measured in 1/ps Return type double setDrudeFriction(self, coeff)Â¶ Set the friction coefficient which determines how strongly the internal coordinates of Drude particles are coupled to the heat bath (in inverse ps). Parameters coeff (double) â the friction coefficient, measured in 1/ps step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take computeSystemTemperature(self) → doubleÂ¶ Compute the instantaneous temperature of the System, measured in Kelvin. This is calculated based on the kinetic energy of the ordinary particles (ones not attached to a Drude particle), as well as the center of mass motion of the Drude particle pairs. It does not include the internal motion of the pairs. On average, this should be approximately equal to the value returned by getTemperature(). computeDrudeTemperature(self) → doubleÂ¶ Compute the instantaneous temperature of the Drude system, measured in Kelvin. This is calculated based on the kinetic energy of the internal motion of Drude pairs and should remain close to the prescribed Drude temperature. getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getDrudeTemperature(self) → doubleÂ¶ Get the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin Return type double getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getMaxDrudeDistance(self) → doubleÂ¶ Get the maximum distance a Drude particle can ever move from its parent particle, measured in nm. This is implemented with a hard wall constraint. The default value is 0.02. If this distance is set to 0, the hard wall constraint is omitted. getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setDrudeTemperature(self, temp)Â¶ Set the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). Parameters temp (double) â the temperature of the heat bath, measured in Kelvin setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setMaxDrudeDistance(self, distance)Â¶ Set the maximum distance a Drude particle can ever move from its parent particle, measured in nm. This is implemented with a hard wall constraint. The default value is 0.02. If this distance is set to 0, the hard wall constraint is omitted. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps