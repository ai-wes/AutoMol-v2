DrudeSCFIntegratorÂ¶ class openmm.openmm.DrudeSCFIntegrator(*args)Â¶ This is a leap-frog Verlet Integrator that simulates systems with Drude particles. It uses the self-consistent field (SCF) method: at every time step, the positions of Drude particles are adjusted to minimize the potential energy. This Integrator requires the System to include a DrudeForce, which it uses to identify the Drude particles. __init__(self, stepSize) → DrudeSCFIntegratorÂ¶ __init__(self, other) → DrudeSCFIntegrator Create a DrudeSCFIntegrator. Parameters stepSize (double) â the step size with which to integrator the system (in picoseconds) Methods __init__(->Â DrudeSCFIntegrator) Create a DrudeSCFIntegrator. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getDrudeTemperature(self) Get the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). getIntegrationForceGroups(self) Get which force groups to use for integration. getMaxDrudeDistance(self) Get the maximum distance a Drude particle can ever move from its parent particle, measured in nm. getMinimizationErrorTolerance(self) Get the error tolerance to use when minimizing the potential energy. getRandomNumberSeed(self) Get the random number seed. getStepSize(self) Get the size of each time step, in picoseconds. setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setDrudeTemperature(self,Â temp) Set the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). setIntegrationForceGroups(groups) Set which force groups to use for integration. setMaxDrudeDistance(self,Â distance) Set the maximum distance a Drude particle can ever move from its parent particle, measured in nm. setMinimizationErrorTolerance(self,Â tol) Set the error tolerance to use when minimizing the potential energy. setRandomNumberSeed(self,Â seed) Set the random number seed. setStepSize(self,Â size) Set the size of each time step, in picoseconds. step(self,Â steps) Advance a simulation through time by taking a series of time steps. Attributes thisown The membership flag getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getDrudeTemperature(self) → doubleÂ¶ Get the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin Return type double getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getMaxDrudeDistance(self) → doubleÂ¶ Get the maximum distance a Drude particle can ever move from its parent particle, measured in nm. This is implemented with a hard wall constraint. The default value is 0.02. If this distance is set to 0, the hard wall constraint is omitted. getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setDrudeTemperature(self, temp)Â¶ Set the temperature of the heat bath applied to internal coordinates of Drude particles (in Kelvin). Parameters temp (double) â the temperature of the heat bath, measured in Kelvin setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setMaxDrudeDistance(self, distance)Â¶ Set the maximum distance a Drude particle can ever move from its parent particle, measured in nm. This is implemented with a hard wall constraint. The default value is 0.02. If this distance is set to 0, the hard wall constraint is omitted. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps property thisownÂ¶ The membership flag getMinimizationErrorTolerance(self) → doubleÂ¶ Get the error tolerance to use when minimizing the potential energy. This roughly corresponds to the maximum allowed force magnitude on the Drude particles after minimization. Returns the error tolerance to use, measured in kJ/mol/nm Return type double setMinimizationErrorTolerance(self, tol)Â¶ Set the error tolerance to use when minimizing the potential energy. This roughly corresponds to the maximum allowed force magnitude on the Drude particles after minimization. Parameters tol (double) â the error tolerance to use, measured in kJ/mol/nm step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take