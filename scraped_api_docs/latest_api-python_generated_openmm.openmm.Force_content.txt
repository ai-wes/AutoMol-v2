ForceÂ¶ class openmm.openmm.Force(*args, **kwargs)Â¶ Force objects apply forces to the particles in a System, or alter their behavior in other ways. This is an abstract class. Subclasses define particular forces. More specifically, a Force object can do any or all of the following: Add a contribution to the force on each particle Add a contribution to the potential energy of the System Modify the positions and velocities of particles at the start of each time step Define parameters which are stored in the Context and can be modified by the user Change the values of parameters defined by other Force objects at the start of each time step Forces may be organized into âforce groupsâ. This is used for multiple time step integration, and allows subsets of the Forces in a System to be evaluated at different times. By default, all Forces are in group 0. Call setForceGroup() to change this. Some Force subclasses may provide additional methods to further split their computations into multiple groups. Be aware that particular Platforms may place restrictions on the use of force groups, such as requiring all nonbonded forces to be in the same group. __init__(*args, **kwargs)Â¶ Initialize self. See help(type(self)) for accurate signature. Methods __init__(*args,Â **kwargs) Initialize self. getForceGroup(self) Get the force group this Force belongs to. getName(self) Get the name of this Force. setForceGroup(self,Â group) Set the force group this Force belongs to. setName(self,Â name) Set the name of this Force. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. This method should be overridden for all Force subclasses, or a OpenMM::OpenMMException will be thrown Returns true if Force uses periodic boundaries or false if it does not Return type bool