HarmonicAngleForceÂ¶ class openmm.openmm.HarmonicAngleForce(*args)Â¶ This class implements an interaction between groups of three particles that varies harmonically with the angle between them. To use it, create a HarmonicAngleForce object then call addAngle() once for each angle. After an angle has been added, you can modify its force field parameters by calling setAngleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). __init__(self) → HarmonicAngleForceÂ¶ __init__(self, other) → HarmonicAngleForce Create a HarmonicAngleForce. Methods __init__(->Â HarmonicAngleForce) Create a HarmonicAngleForce. addAngle(self,Â particle1,Â particle2,Â â¦) Add an angle term to the force field. getAngleParameters(self,Â index) Get the force field parameters for an angle term. getForceGroup(self) Get the force group this Force belongs to. getName(self) Get the name of this Force. getNumAngles(self) Get the number of harmonic bond angle terms in the potential function setAngleParameters(self,Â index,Â particle1,Â â¦) Set the force field parameters for an angle term. setForceGroup(self,Â group) Set the force group this Force belongs to. setName(self,Â name) Set the name of this Force. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-angle parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumAngles(self) → intÂ¶ Get the number of harmonic bond angle terms in the potential function addAngle(self, particle1, particle2, particle3, angle, k) → intÂ¶ Add an angle term to the force field. Parameters particle1 (int) â the index of the first particle forming the angle particle2 (int) â the index of the second particle forming the angle particle3 (int) â the index of the third particle forming the angle angle (double) â the equilibrium angle, measured in radians k (double) â the harmonic force constant for the angle, measured in kJ/mol/radian^2 Returns the index of the angle that was added Return type int getAngleParameters(self, index)Â¶ Get the force field parameters for an angle term. Parameters index (int) â the index of the angle for which to get parameters Returns particle1 (int) â the index of the first particle forming the angle particle2 (int) â the index of the second particle forming the angle particle3 (int) â the index of the third particle forming the angle angle (double) â the equilibrium angle, measured in radians k (double) â the harmonic force constant for the angle, measured in kJ/mol/radian^2 setAngleParameters(self, index, particle1, particle2, particle3, angle, k)Â¶ Set the force field parameters for an angle term. Parameters index (int) â the index of the angle for which to set parameters particle1 (int) â the index of the first particle forming the angle particle2 (int) â the index of the second particle forming the angle particle3 (int) â the index of the third particle forming the angle angle (double) â the equilibrium angle, measured in radians k (double) â the harmonic force constant for the angle, measured in kJ/mol/radian^2 updateParametersInContext(self, context)Â¶ Update the per-angle parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setAngleParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information this method updates is the values of per-angle parameters. The set of particles involved in a angle cannot be changed, nor can new angles be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.