HarmonicBondForceÂ¶ class openmm.openmm.HarmonicBondForce(*args)Â¶ This class implements an interaction between pairs of particles that varies harmonically with the distance between them. To use it, create a HarmonicBondForce object then call addBond() once for each bond. After a bond has been added, you can modify its force field parameters by calling setBondParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). __init__(self) → HarmonicBondForceÂ¶ __init__(self, other) → HarmonicBondForce Create a HarmonicBondForce. Methods __init__(->Â HarmonicBondForce) Create a HarmonicBondForce. addBond(self,Â particle1,Â particle2,Â length,Â k) Add a bond term to the force field. getBondParameters(self,Â index) Get the force field parameters for a bond term. getForceGroup(self) Get the force group this Force belongs to. getName(self) Get the name of this Force. getNumBonds(self) Get the number of harmonic bond stretch terms in the potential function setBondParameters(self,Â index,Â particle1,Â â¦) Set the force field parameters for a bond term. setForceGroup(self,Â group) Set the force group this Force belongs to. setName(self,Â name) Set the name of this Force. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-bond parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumBonds(self) → intÂ¶ Get the number of harmonic bond stretch terms in the potential function addBond(self, particle1, particle2, length, k) → intÂ¶ Add a bond term to the force field. Parameters particle1 (int) â the index of the first particle connected by the bond particle2 (int) â the index of the second particle connected by the bond length (double) â the equilibrium length of the bond, measured in nm k (double) â the harmonic force constant for the bond, measured in kJ/mol/nm^2 Returns the index of the bond that was added Return type int getBondParameters(self, index)Â¶ Get the force field parameters for a bond term. Parameters index (int) â the index of the bond for which to get parameters Returns particle1 (int) â the index of the first particle connected by the bond particle2 (int) â the index of the second particle connected by the bond length (double) â the equilibrium length of the bond, measured in nm k (double) â the harmonic force constant for the bond, measured in kJ/mol/nm^2 setBondParameters(self, index, particle1, particle2, length, k)Â¶ Set the force field parameters for a bond term. Parameters index (int) â the index of the bond for which to set parameters particle1 (int) â the index of the first particle connected by the bond particle2 (int) â the index of the second particle connected by the bond length (double) â the equilibrium length of the bond, measured in nm k (double) â the harmonic force constant for the bond, measured in kJ/mol/nm^2 updateParametersInContext(self, context)Â¶ Update the per-bond parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setBondParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information this method updates is the values of per-bond parameters. The set of particles involved in a bond cannot be changed, nor can new bonds be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.