IntegratorÂ¶ class openmm.openmm.Integrator(*args, **kwargs)Â¶ An Integrator defines a method for simulating a System by integrating the equations of motion. This is an abstract class. Subclasses define particular integration methods. Each Integrator object is bound to a particular Context which it integrates. This connection is specified by passing the Integrator as an argument to the constructor of the Context. __init__(*args, **kwargs)Â¶ Initialize self. See help(type(self)) for accurate signature. Methods __init__(*args,Â **kwargs) Initialize self. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getIntegrationForceGroups(self) Get which force groups to use for integration. getStepSize(self) Get the size of each time step, in picoseconds. setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setIntegrationForceGroups(groups) Set which force groups to use for integration. setStepSize(self,Â size) Set the size of each time step, in picoseconds. step(self,Â steps) Advance a simulation through time by taking a series of time steps. Attributes thisown The membership flag property thisownÂ¶ The membership flag getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0.