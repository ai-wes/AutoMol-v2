LangevinMiddleIntegratorÂ¶ class openmm.openmm.LangevinMiddleIntegrator(*args)Â¶ This is an Integrator which simulates a System using Langevin dynamics, with the LFMiddle discretization (J. Phys. Chem. A 2019, 123, 28, 6056-6079). This method tend to produce more accurate configurational sampling than other discretizations, such as the one used in LangevinIntegrator. The algorithm is closely related to the BAOAB discretization (Proc. R. Soc. A. 472: 20160138). Both methods produce identical trajectories, but LFMiddle returns half step (leapfrog) velocities, while BAOAB returns on-step velocities. The former provide a much more accurate sampling of the thermal ensemble. __init__(self, temperature, frictionCoeff, stepSize) → LangevinMiddleIntegratorÂ¶ __init__(self, other) → LangevinMiddleIntegrator Create a LangevinMiddleIntegrator. Parameters temperature (double) â the temperature of the heat bath (in Kelvin) frictionCoeff (double) â the friction coefficient which couples the system to the heat bath (in inverse picoseconds) stepSize (double) â the step size with which to integrate the system (in picoseconds) Methods __init__(->Â LangevinMiddleIntegrator) Create a LangevinMiddleIntegrator. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getFriction(self) Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). getIntegrationForceGroups(self) Get which force groups to use for integration. getRandomNumberSeed(self) Get the random number seed. getStepSize(self) Get the size of each time step, in picoseconds. getTemperature(self) Get the temperature of the heat bath (in Kelvin). setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setFriction(self,Â coeff) Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). setIntegrationForceGroups(groups) Set which force groups to use for integration. setRandomNumberSeed(self,Â seed) Set the random number seed. setStepSize(self,Â size) Set the size of each time step, in picoseconds. setTemperature(self,Â temp) Set the temperature of the heat bath (in Kelvin). step(self,Â steps) Advance a simulation through time by taking a series of time steps. Attributes thisown The membership flag property thisownÂ¶ The membership flag getTemperature(self) → doubleÂ¶ Get the temperature of the heat bath (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin Return type double setTemperature(self, temp)Â¶ Set the temperature of the heat bath (in Kelvin). Parameters temp (double) â the temperature of the heat bath, measured in Kelvin getFriction(self) → doubleÂ¶ Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Returns the friction coefficient, measured in 1/ps Return type double setFriction(self, coeff)Â¶ Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Parameters coeff (double) â the friction coefficient, measured in 1/ps getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Integrator. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps