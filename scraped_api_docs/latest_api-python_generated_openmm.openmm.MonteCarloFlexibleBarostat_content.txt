MonteCarloFlexibleBarostatÂ¶ class openmm.openmm.MonteCarloFlexibleBarostat(*args)Â¶ This class uses a Monte Carlo algorithm to adjust the size and shape of the periodic box, simulating the effect of constant pressure. This class is similar to MonteCarloBarostat, but it simulates a fully flexible periodic box in which all three lengths and all three angles are free to change independently. It is primarily useful for simulations of bulk materials where the shape of a crystalâs unit cell may not be known in advance, or could even change with time as it transitions between phases. Like MonteCarloBarostat, the default behavior of this class is to scale the centroid position of each molecule while holding it rigid. In simulations of materials where all atoms are covalently bonded to each other, this behavior will not work well since the entire system then consists of a single molecule. You can use setScaleMoleculesAsRigid() to disable this behavior and instead have it scale the position of every atom independently. This class assumes the simulation is also being run at constant temperature, and requires you to specify the system temperature (since it affects the acceptance probability for Monte Carlo moves). It does not actually perform temperature regulation, however. You must use another mechanism along with it to maintain the temperature, such as LangevinIntegrator or AndersenThermostat. __init__(self, defaultPressure, defaultTemperature, frequency=25, scaleMoleculesAsRigid=True) → MonteCarloFlexibleBarostatÂ¶ __init__(self, other) → MonteCarloFlexibleBarostat Create a MonteCarloFlexibleBarostat. Parameters defaultPressure (double) â the default pressure acting on the system (in bar) defaultTemperature (double) â the default temperature at which the system is being maintained (in Kelvin) frequency (int) â the frequency at which Monte Carlo pressure changes should be attempted (in time steps) scaleMoleculesAsRigid (bool) â if true, coordinate scaling keeps molecules rigid, scaling only the center of mass of each one. If false, every atom is scaled independently. Methods Pressure() This is the name of the parameter which stores the current pressure acting on the system (in bar). Temperature() This is the name of the parameter which stores the current temperature at which the system is being maintained (in Kelvin) __init__(->Â MonteCarloFlexibleBarostat) Create a MonteCarloFlexibleBarostat. getDefaultPressure(self) Get the default pressure acting on the system (in bar). getDefaultTemperature(self) Get the default temperature at which the system is being maintained, measured in Kelvin. getForceGroup(self) Get the force group this Force belongs to. getFrequency(self) Get the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. getName(self) Get the name of this Force. getRandomNumberSeed(self) Get the random number seed. getScaleMoleculesAsRigid(self) Get whether scaling is applied to the centroid of each molecule while keeping the molecules rigid, or to each atom independently. setDefaultPressure(self,Â pressure) Set the default pressure acting on the system. setDefaultTemperature(self,Â temp) Set the default temperature at which the system is being maintained. setForceGroup(self,Â group) Set the force group this Force belongs to. setFrequency(self,Â freq) Set the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. setName(self,Â name) Set the name of this Force. setRandomNumberSeed(self,Â seed) Set the random number seed. setScaleMoleculesAsRigid(self,Â rigid) Set whether scaling is applied to the centroid of each molecule while keeping the molecules rigid, or to each atom independently. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag static Pressure() → std::string const &Â¶ This is the name of the parameter which stores the current pressure acting on the system (in bar). static Temperature() → std::string const &Â¶ This is the name of the parameter which stores the current temperature at which the system is being maintained (in Kelvin) getDefaultPressure(self) → doubleÂ¶ Get the default pressure acting on the system (in bar). Returns the default pressure acting on the system, measured in bar. Return type double setDefaultPressure(self, pressure)Â¶ Set the default pressure acting on the system. This will affect any new Contexts you create, but not ones that already exist. Parameters pressure (double) â the default pressure acting on the system, measured in bar. getFrequency(self) → intÂ¶ Get the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled. setFrequency(self, freq)Â¶ Set the frequency (in time steps) at which Monte Carlo pressure changes should be attempted. If this is set to 0, the barostat is disabled. getDefaultTemperature(self) → doubleÂ¶ Get the default temperature at which the system is being maintained, measured in Kelvin. setDefaultTemperature(self, temp)Â¶ Set the default temperature at which the system is being maintained. This will affect any new Contexts you create, but not ones that already exist. Parameters temp (double) â the system temperature, measured in Kelvin. getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. It is guaranteed that if two simulations are run with different random number seeds, the sequence of Monte Carlo steps will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getScaleMoleculesAsRigid(self) → boolÂ¶ Get whether scaling is applied to the centroid of each molecule while keeping the molecules rigid, or to each atom independently. Returns true if scaling is applied to molecule centroids, false if it is applied to each atom independently. Return type bool setScaleMoleculesAsRigid(self, rigid)Â¶ Set whether scaling is applied to the centroid of each molecule while keeping the molecules rigid, or to each atom independently. getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.