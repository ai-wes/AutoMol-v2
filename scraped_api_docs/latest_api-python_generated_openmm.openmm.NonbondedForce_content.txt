NonbondedForceÂ¶ class openmm.openmm.NonbondedForce(*args)Â¶ This class implements nonbonded interactions between particles, including a Coulomb force to represent electrostatics and a Lennard-Jones force to represent van der Waals interactions. It optionally supports periodic boundary conditions and cutoffs for long range interactions. Lennard-Jones interactions are calculated with the Lorentz-Berthelot combining rule: it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles. To use this class, create a NonbondedForce object, then call addParticle() once for each particle in the System to define its parameters. The number of particles for which you define nonbonded parameters must be exactly equal to the number of particles in the System, or else an exception will be thrown when you try to create a Context. After a particle has been added, you can modify its force field parameters by calling setParticleParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). NonbondedForce also lets you specify âexceptionsâ, particular pairs of particles whose interactions should be computed based on different parameters than those defined for the individual particles. This can be used to completely exclude certain interactions from the force calculation, or to alter how they interact with each other. Many molecular force fields omit Coulomb and Lennard-Jones interactions between particles separated by one or two bonds, while using modified parameters for those separated by three bonds (known as â1-4 interactionsâ). This class provides a convenience method for this case called createExceptionsFromBonds(). You pass to it a list of bonds and the scale factors to use for 1-4 interactions. It identifies all pairs of particles which are separated by 1, 2, or 3 bonds, then automatically creates exceptions for them. When using a cutoff, by default Lennard-Jones interactions are sharply truncated at the cutoff distance. Optionally you can instead use a switching function to make the interaction smoothly go to zero over a finite distance range. To enable this, call setUseSwitchingFunction(). You must also call setSwitchingDistance() to specify the distance at which the interaction should begin to decrease. The switching distance must be less than the cutoff distance. Another optional feature of this class (enabled by default) is to add a contribution to the energy which approximates the effect of all Lennard-Jones interactions beyond the cutoff in a periodic system. When running a simulation at constant pressure, this can improve the quality of the result. Call setUseDispersionCorrection() to set whether this should be used. In some applications, it is useful to be able to inexpensively change the parameters of small groups of particles. Usually this is done to interpolate between two sets of parameters. For example, a titratable group might have two states it can exist in, each described by a different set of parameters for the atoms that make up the group. You might then want to smoothly interpolate between the two states. This is done by first calling addGlobalParameter() to define a Context parameter, then addParticleParameterOffset() to create a âparameter offsetâ that depends on the Context parameter. Each offset defines the following: A Context parameter used to interpolate between the states. A single particle whose parameters are influenced by the Context parameter. Three scale factors (chargeScale, sigmaScale, and epsilonScale) that specify how the Context parameter affects the particle. The âeffectiveâ parameters for a particle (those used to compute forces) are given by charge = baseCharge + param*chargeScale sigma = baseSigma + param*sigmaScale epsilon = baseEpsilon + param*epsilonScale where the âbaseâ values are the ones specified by addParticle() and âoaramâ is the current value of the Context parameter. A single Context parameter can apply offsets to multiple particles, and multiple parameters can be used to apply offsets to the same particle. Parameters can also be used to modify exceptions in exactly the same way by calling addExceptionParameterOffset(). __init__(self) → NonbondedForceÂ¶ __init__(self, other) → NonbondedForce Create a NonbondedForce. Methods __init__(->Â NonbondedForce) Create a NonbondedForce. addException(self,Â particle1,Â particle2,Â â¦) Add an interaction to the list of exceptions that should be calculated differently from other interactions. addExceptionParameterOffset(self,Â parameter,Â â¦) Add an offset to the parameters of a particular exception, based on a global parameter. addException_usingRMin(particle1,Â particle2,Â â¦) Add interaction exception using the product of the two atomsâ elementary charges, rMin and epsilon, which is standard for AMBER force fields. addGlobalParameter(self,Â name,Â defaultValue) Add a new global parameter that parameter offsets may depend on. addParticle(self,Â charge,Â sigma,Â epsilon) Add the nonbonded force parameters for a particle. addParticleParameterOffset(self,Â parameter,Â â¦) Add an offset to the per-particle parameters of a particular particle, based on a global parameter. addParticle_usingRVdw(charge,Â rVDW,Â epsilon) Add particle using elemetrary charge. createExceptionsFromBonds(self,Â bonds,Â â¦) Identify exceptions based on the molecular topology. getCutoffDistance(self) Get the cutoff distance (in nm) being used for nonbonded interactions. getEwaldErrorTolerance(self) Get the error tolerance for Ewald summation. getExceptionParameterOffset(self,Â index) Get the offset added to the parameters of a particular exception, based on a global parameter. getExceptionParameters(self,Â index) Get the force field parameters for an interaction that should be calculated differently from others. getExceptionsUsePeriodicBoundaryConditions(self) Get whether periodic boundary conditions should be applied to exceptions. getForceGroup(self) Get the force group this Force belongs to. getGlobalParameterDefaultValue(self,Â index) Get the default value of a global parameter. getGlobalParameterName(self,Â index) Get the name of a global parameter. getIncludeDirectSpace(self) Get whether to include direct space interactions when calculating forces and energies. getLJPMEParameters(self) Get the parameters to use for dispersion term in LJ-PME calculations. getLJPMEParametersInContext(self,Â context) Get the PME parameters being used for the dispersion term for LJPME in a particular Context. getName(self) Get the name of this Force. getNonbondedMethod(self) Get the method used for handling long range nonbonded interactions. getNumExceptionParameterOffsets(self) Get the number of exception parameter offsets that have been added. getNumExceptions(self) Get the number of special interactions that should be calculated differently from other interactions. getNumGlobalParameters(self) Get the number of global parameters that have been added. getNumParticleParameterOffsets(self) Get the number of particles parameter offsets that have been added. getNumParticles(self) Get the number of particles for which force field parameters have been defined. getPMEParameters(self) Get the parameters to use for PME calculations. getPMEParametersInContext(self,Â context) Get the parameters being used for PME in a particular Context. getParticleParameterOffset(self,Â index) Get the offset added to the per-particle parameters of a particular particle, based on a global parameter. getParticleParameters(self,Â index) Get the nonbonded force parameters for a particle. getReactionFieldDielectric(self) Get the dielectric constant to use for the solvent in the reaction field approximation. getReciprocalSpaceForceGroup(self) Get the force group that reciprocal space interactions for Ewald or PME are included in. getSwitchingDistance(self) Get the distance at which the switching function begins to reduce the Lennard-Jones interaction. getUseDispersionCorrection(self) Get whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. getUseSwitchingFunction(self) Get whether a switching function is applied to the Lennard-Jones interaction. setCutoffDistance(self,Â distance) Set the cutoff distance (in nm) being used for nonbonded interactions. setEwaldErrorTolerance(self,Â tol) Set the error tolerance for Ewald summation. setExceptionParameterOffset(self,Â index,Â â¦) Set the offset added to the parameters of a particular exception, based on a global parameter. setExceptionParameters(self,Â index,Â â¦) Set the force field parameters for an interaction that should be calculated differently from others. setExceptionsUsePeriodicBoundaryConditions(â¦) Set whether periodic boundary conditions should be applied to exceptions. setForceGroup(self,Â group) Set the force group this Force belongs to. setGlobalParameterDefaultValue(self,Â index,Â â¦) Set the default value of a global parameter. setGlobalParameterName(self,Â index,Â name) Set the name of a global parameter. setIncludeDirectSpace(self,Â include) Set whether to include direct space interactions when calculating forces and energies. setLJPMEParameters(self,Â alpha,Â nx,Â ny,Â nz) Set the parameters to use for the dispersion term in LJPME calculations. setName(self,Â name) Set the name of this Force. setNonbondedMethod(self,Â method) Set the method used for handling long range nonbonded interactions. setPMEParameters(self,Â alpha,Â nx,Â ny,Â nz) Set the parameters to use for PME calculations. setParticleParameterOffset(self,Â index,Â â¦) Set the offset added to the per-particle parameters of a particular particle, based on a global parameter. setParticleParameters(self,Â index,Â charge,Â â¦) Set the nonbonded force parameters for a particle. setReactionFieldDielectric(self,Â dielectric) Set the dielectric constant to use for the solvent in the reaction field approximation. setReciprocalSpaceForceGroup(self,Â group) Set the force group that reciprocal space interactions for Ewald or PME are included in. setSwitchingDistance(self,Â distance) Set the distance at which the switching function begins to reduce the Lennard-Jones interaction. setUseDispersionCorrection(self,Â useCorrection) Set whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. setUseSwitchingFunction(self,Â use) Set whether a switching function is applied to the Lennard-Jones interaction. updateParametersInContext(self,Â context) Update the particle and exception parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes CutoffNonPeriodic CutoffPeriodic Ewald LJPME NoCutoff PME thisown The membership flag property thisownÂ¶ The membership flag getNumParticles(self) → intÂ¶ Get the number of particles for which force field parameters have been defined. getNumExceptions(self) → intÂ¶ Get the number of special interactions that should be calculated differently from other interactions. getNumGlobalParameters(self) → intÂ¶ Get the number of global parameters that have been added. getNumParticleParameterOffsets(self) → intÂ¶ Get the number of particles parameter offsets that have been added. getNumExceptionParameterOffsets(self) → intÂ¶ Get the number of exception parameter offsets that have been added. getNonbondedMethod(self) → OpenMM::NonbondedForce::NonbondedMethodÂ¶ Get the method used for handling long range nonbonded interactions. setNonbondedMethod(self, method)Â¶ Set the method used for handling long range nonbonded interactions. getCutoffDistance(self) → doubleÂ¶ Get the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Returns the cutoff distance, measured in nm Return type double setCutoffDistance(self, distance)Â¶ Set the cutoff distance (in nm) being used for nonbonded interactions. If the NonbondedMethod in use is NoCutoff, this value will have no effect. Parameters distance (double) â the cutoff distance, measured in nm getUseSwitchingFunction(self) → boolÂ¶ Get whether a switching function is applied to the Lennard-Jones interaction. If the nonbonded method is set to NoCutoff, this option is ignored. setUseSwitchingFunction(self, use)Â¶ Set whether a switching function is applied to the Lennard-Jones interaction. If the nonbonded method is set to NoCutoff, this option is ignored. getSwitchingDistance(self) → doubleÂ¶ Get the distance at which the switching function begins to reduce the Lennard-Jones interaction. This must be less than the cutoff distance. setSwitchingDistance(self, distance)Â¶ Set the distance at which the switching function begins to reduce the Lennard-Jones interaction. This must be less than the cutoff distance. getReactionFieldDielectric(self) → doubleÂ¶ Get the dielectric constant to use for the solvent in the reaction field approximation. setReactionFieldDielectric(self, dielectric)Â¶ Set the dielectric constant to use for the solvent in the reaction field approximation. getEwaldErrorTolerance(self) → doubleÂ¶ Get the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however. For PME calculations, if setPMEParameters() is used to set alpha to something other than 0, this value is ignored. setEwaldErrorTolerance(self, tol)Â¶ Set the error tolerance for Ewald summation. This corresponds to the fractional error in the forces which is acceptable. This value is used to select the reciprocal space cutoff and separation parameter so that the average error level will be less than the tolerance. There is not a rigorous guarantee that all forces on all atoms will be less than the tolerance, however. For PME calculations, if setPMEParameters() is used to set alpha to something other than 0, this value is ignored. getPMEParameters(self)Â¶ Get the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Returns alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis getLJPMEParameters(self)Â¶ Get the parameters to use for dispersion term in LJ-PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Returns alpha (double) â the separation parameter nx (int) â the number of dispersion grid points along the X axis ny (int) â the number of dispersion grid points along the Y axis nz (int) â the number of dispersion grid points along the Z axis setPMEParameters(self, alpha, nx, ny, nz)Â¶ Set the parameters to use for PME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Parameters alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis setLJPMEParameters(self, alpha, nx, ny, nz)Â¶ Set the parameters to use for the dispersion term in LJPME calculations. If alpha is 0 (the default), these parameters are ignored and instead their values are chosen based on the Ewald error tolerance. Parameters alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis getPMEParametersInContext(self, context)Â¶ Get the parameters being used for PME in a particular Context. Because some platforms have restrictions on the allowed grid sizes, the values that are actually used may be slightly different from those specified with setPMEParameters(), or the standard values calculated based on the Ewald error tolerance. See the manual for details. Parameters context (Context) â the Context for which to get the parameters Returns alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis getLJPMEParametersInContext(self, context)Â¶ Get the PME parameters being used for the dispersion term for LJPME in a particular Context. Because some platforms have restrictions on the allowed grid sizes, the values that are actually used may be slightly different from those specified with setPMEParameters(), or the standard values calculated based on the Ewald error tolerance. See the manual for details. Parameters context (Context) â the Context for which to get the parameters Returns alpha (double) â the separation parameter nx (int) â the number of grid points along the X axis ny (int) â the number of grid points along the Y axis nz (int) â the number of grid points along the Z axis addParticle(self, charge, sigma, epsilon) → intÂ¶ Add the nonbonded force parameters for a particle. This should be called once for each particle in the System. When it is called for the iâth time, it specifies the parameters for the iâth particle. For calculating the Lennard-Jones interaction between two particles, the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles is used (the Lorentz-Berthelot combining rule). Parameters charge (double) â the charge of the particle, measured in units of the proton charge sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol Returns the index of the particle that was added Return type int getParticleParameters(self, index)Â¶ Get the nonbonded force parameters for a particle. Parameters index (int) â the index of the particle for which to get parameters Returns charge (double) â the charge of the particle, measured in units of the proton charge sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol setParticleParameters(self, index, charge, sigma, epsilon)Â¶ Set the nonbonded force parameters for a particle. When calculating the Lennard-Jones interaction between two particles, it uses the arithmetic mean of the sigmas and the geometric mean of the epsilons for the two interacting particles (the Lorentz-Berthelot combining rule). Parameters index (int) â the index of the particle for which to set parameters charge (double) â the charge of the particle, measured in units of the proton charge sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol addException(self, particle1, particle2, chargeProd, sigma, epsilon, replace=False) → intÂ¶ Add an interaction to the list of exceptions that should be calculated differently from other interactions. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations. Regardless of the NonbondedMethod used by this Force, cutoffs are never applied to exceptions. That is because they are primarily used for 1-4 interactions, which are really a type of bonded interaction and are parametrized together with the other bonded interactions. In many cases, you can use createExceptionsFromBonds() rather than adding each exception explicitly. Parameters particle1 (int) â the index of the first particle involved in the interaction particle2 (int) â the index of the second particle involved in the interaction chargeProd (double) â the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol replace (bool) â determines the behavior if there is already an exception for the same two particles. If true, the existing one is replaced. If false, an exception is thrown. Returns the index of the exception that was added Return type int getExceptionParameters(self, index)Â¶ Get the force field parameters for an interaction that should be calculated differently from others. Parameters index (int) â the index of the interaction for which to get parameters Returns particle1 (int) â the index of the first particle involved in the interaction particle2 (int) â the index of the second particle involved in the interaction chargeProd (double) â the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol setExceptionParameters(self, index, particle1, particle2, chargeProd, sigma, epsilon)Â¶ Set the force field parameters for an interaction that should be calculated differently from others. If chargeProd and epsilon are both equal to 0, this will cause the interaction to be completely omitted from force and energy calculations. Regardless of the NonbondedMethod used by this Force, cutoffs are never applied to exceptions. That is because they are primarily used for 1-4 interactions, which are really a type of bonded interaction and are parametrized together with the other bonded interactions. Parameters index (int) â the index of the interaction for which to get parameters particle1 (int) â the index of the first particle involved in the interaction particle2 (int) â the index of the second particle involved in the interaction chargeProd (double) â the scaled product of the atomic charges (i.e. the strength of the Coulomb interaction), measured in units of the proton charge squared sigma (double) â the sigma parameter of the Lennard-Jones potential (corresponding to the van der Waals radius of the particle), measured in nm epsilon (double) â the epsilon parameter of the Lennard-Jones potential (corresponding to the well depth of the van der Waals interaction), measured in kJ/mol createExceptionsFromBonds(self, bonds, coulomb14Scale, lj14Scale)Â¶ Identify exceptions based on the molecular topology. Particles which are separated by one or two bonds are set to not interact at all, while pairs of particles separated by three bonds (known as â1-4 interactionsâ) have their Coulomb and Lennard-Jones interactions reduced by a fixed factor. Parameters bonds (vector< std::pair< int, int > >) â the set of bonds based on which to construct exceptions. Each element specifies the indices of two particles that are bonded to each other. coulomb14Scale (double) â pairs of particles separated by three bonds will have the strength of their Coulomb interaction multiplied by this factor lj14Scale (double) â pairs of particles separated by three bonds will have the strength of their Lennard-Jones interaction multiplied by this factor addGlobalParameter(self, name, defaultValue) → intÂ¶ Add a new global parameter that parameter offsets may depend on. The default value provided to this method is the initial value of the parameter in newly created Contexts. You can change the value at any time by calling setParameter() on the Context. Parameters name (string) â the name of the parameter defaultValue (double) â the default value of the parameter Returns the index of the parameter that was added Return type int getGlobalParameterName(self, index) → std::string const &Â¶ Get the name of a global parameter. Parameters index (int) â the index of the parameter for which to get the name Returns the parameter name Return type string setGlobalParameterName(self, index, name)Â¶ Set the name of a global parameter. Parameters index (int) â the index of the parameter for which to set the name name (string) â the name of the parameter getGlobalParameterDefaultValue(self, index) → doubleÂ¶ Get the default value of a global parameter. Parameters index (int) â the index of the parameter for which to get the default value Returns the parameter default value Return type double setGlobalParameterDefaultValue(self, index, defaultValue)Â¶ Set the default value of a global parameter. Parameters index (int) â the index of the parameter for which to set the default value defaultValue (double) â the default value of the parameter addParticleParameterOffset(self, parameter, particleIndex, chargeScale, sigmaScale, epsilonScale) → intÂ¶ Add an offset to the per-particle parameters of a particular particle, based on a global parameter. Parameters parameter (string) â the name of the global parameter. It must have already been added with addGlobalParameter(). Its value can be modified at any time by calling Context::setParameter(). particleIndex (int) â the index of the particle whose parameters are affected chargeScale (double) â this value multiplied by the parameter value is added to the particleâs charge sigmaScale (double) â this value multiplied by the parameter value is added to the particleâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the particleâs epsilon Returns the index of the offset that was added Return type int getParticleParameterOffset(self, index)Â¶ Get the offset added to the per-particle parameters of a particular particle, based on a global parameter. Parameters index (int) â the index of the offset to query, as returned by addParticleParameterOffset() parameter (string) â the name of the global parameter particleIndex (int) â the index of the particle whose parameters are affected chargeScale (double) â this value multiplied by the parameter value is added to the particleâs charge sigmaScale (double) â this value multiplied by the parameter value is added to the particleâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the particleâs epsilon setParticleParameterOffset(self, index, parameter, particleIndex, chargeScale, sigmaScale, epsilonScale)Â¶ Set the offset added to the per-particle parameters of a particular particle, based on a global parameter. Parameters index (int) â the index of the offset to modify, as returned by addParticleParameterOffset() parameter (string) â the name of the global parameter. It must have already been added with addGlobalParameter(). Its value can be modified at any time by calling Context::setParameter(). particleIndex (int) â the index of the particle whose parameters are affected chargeScale (double) â this value multiplied by the parameter value is added to the particleâs charge sigmaScale (double) â this value multiplied by the parameter value is added to the particleâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the particleâs epsilon addExceptionParameterOffset(self, parameter, exceptionIndex, chargeProdScale, sigmaScale, epsilonScale) → intÂ¶ Add an offset to the parameters of a particular exception, based on a global parameter. Parameters parameter (string) â the name of the global parameter. It must have already been added with addGlobalParameter(). Its value can be modified at any time by calling Context::setParameter(). exceptionIndex (int) â the index of the exception whose parameters are affected chargeProdScale (double) â this value multiplied by the parameter value is added to the exceptionâs charge product sigmaScale (double) â this value multiplied by the parameter value is added to the exceptionâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the exceptionâs epsilon Returns the index of the offset that was added Return type int getExceptionParameterOffset(self, index)Â¶ Get the offset added to the parameters of a particular exception, based on a global parameter. Parameters index (int) â the index of the offset to query, as returned by addExceptionParameterOffset() parameter (string) â the name of the global parameter exceptionIndex (int) â the index of the exception whose parameters are affected chargeProdScale (double) â this value multiplied by the parameter value is added to the exceptionâs charge product sigmaScale (double) â this value multiplied by the parameter value is added to the exceptionâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the exceptionâs epsilon setExceptionParameterOffset(self, index, parameter, exceptionIndex, chargeProdScale, sigmaScale, epsilonScale)Â¶ Set the offset added to the parameters of a particular exception, based on a global parameter. Parameters index (int) â the index of the offset to modify, as returned by addExceptionParameterOffset() parameter (string) â the name of the global parameter. It must have already been added with addGlobalParameter(). Its value can be modified at any time by calling Context::setParameter(). exceptionIndex (int) â the index of the exception whose parameters are affected chargeProdScale (double) â this value multiplied by the parameter value is added to the exceptionâs charge product sigmaScale (double) â this value multiplied by the parameter value is added to the exceptionâs sigma epsilonScale (double) â this value multiplied by the parameter value is added to the exceptionâs epsilon getUseDispersionCorrection(self) → boolÂ¶ Get whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results. setUseDispersionCorrection(self, useCorrection)Â¶ Set whether to add a contribution to the energy that approximately represents the effect of Lennard-Jones interactions beyond the cutoff distance. The energy depends on the volume of the periodic box, and is only applicable when periodic boundary conditions are used. When running simulations at constant pressure, adding this contribution can improve the quality of results. getReciprocalSpaceForceGroup(self) → intÂ¶ Get the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: getForceGroup() specifies the group for direct space, and getReciprocalSpaceForceGroup() specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space. setReciprocalSpaceForceGroup(self, group)Â¶ Set the force group that reciprocal space interactions for Ewald or PME are included in. This allows multiple time step integrators to evaluate direct and reciprocal space interactions at different intervals: setForceGroup() specifies the group for direct space, and setReciprocalSpaceForceGroup() specifies the group for reciprocal space. If this is -1 (the default value), the same force group is used for reciprocal space as for direct space. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive), or -1 to use the same force group that is specified for direct space. getIncludeDirectSpace(self) → boolÂ¶ Get whether to include direct space interactions when calculating forces and energies. This is useful if you want to completely replace the direct space calculation, typically with a CustomNonbondedForce that computes it in a nonstandard way, while still using this object for the reciprocal space calculation. setIncludeDirectSpace(self, include)Â¶ Set whether to include direct space interactions when calculating forces and energies. This is useful if you want to completely replace the direct space calculation, typically with a CustomNonbondedForce that computes it in a nonstandard way, while still using this object for the reciprocal space calculation. updateParametersInContext(self, context)Â¶ Update the particle and exception parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setParticleParameters() and setExceptionParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. This method has several limitations. The only information it updates is the parameters of particles and exceptions. All other aspects of the Force (the nonbonded method, the cutoff distance, etc.) are unaffected and can only be changed by reinitializing the Context. Furthermore, only the chargeProd, sigma, and epsilon values of an exception can be changed; the pair of particles involved in the exception cannot change. Finally, this method cannot be used to add new particles or exceptions, only to change the parameters of existing ones. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getExceptionsUsePeriodicBoundaryConditions(self) → boolÂ¶ Get whether periodic boundary conditions should be applied to exceptions. Usually this is not appropriate, because exceptions are normally used to represent bonded interactions (1-2, 1-3, and 1-4 pairs), but there are situations when it does make sense. For example, you may want to simulate an infinite chain where one end of a molecule is bonded to the opposite end of the next periodic copy. Regardless of this value, periodic boundary conditions are only applied to exceptions if they also are applied to other interactions. If the nonbonded method is NoCutoff or CutoffNonPeriodic, this value is ignored. Also note that cutoffs are never applied to exceptions, again because they are normally used to represent bonded interactions. setExceptionsUsePeriodicBoundaryConditions(self, periodic)Â¶ Set whether periodic boundary conditions should be applied to exceptions. Usually this is not appropriate, because exceptions are normally used to represent bonded interactions (1-2, 1-3, and 1-4 pairs), but there are situations when it does make sense. For example, you may want to simulate an infinite chain where one end of a molecule is bonded to the opposite end of the next periodic copy. Regardless of this value, periodic boundary conditions are only applied to exceptions if they also get applied to other interactions. If the nonbonded method is NoCutoff or CutoffNonPeriodic, this value is ignored. Also note that cutoffs are never applied to exceptions, again because they are normally used to represent bonded interactions. addParticle_usingRVdw(charge, rVDW, epsilon)Â¶ Add particle using elemetrary charge. Rvdw and epsilon, which is consistent with AMBER parameter file usage. Note that the sum of the radii of the two interacting atoms is the minimum energy point in the Lennard Jones potential and is often called rMin. The conversion from sigma follows: rVDW = 2^1/6 * sigma/2 addException_usingRMin(particle1, particle2, chargeProd, rMin, epsilon)Â¶ Add interaction exception using the product of the two atomsâ elementary charges, rMin and epsilon, which is standard for AMBER force fields. Note that rMin is the minimum energy point in the Lennard Jones potential. The conversion from sigma is: rMin = 2^1/6 * sigma. getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.