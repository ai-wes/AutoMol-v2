NoseHooverChainÂ¶ class openmm.openmm.NoseHooverChain(*args)Â¶ This class defines a chain of Nose-Hoover particles to be used as a heat bath to scale the velocities of a collection of particles subject to thermostating. The heat bath is propagated using the multi time step approach detailed in Martyna, M. E. Tuckerman, D. J. Tobias and M. L. Klein, Mol. Phys. 87, 1117 (1996). where the total number of timesteps used to propagate the chain in each step is the number of MTS steps multiplied by the number of terms in the Yoshida-Suzuki decomposition. Two types of NHC may be created. The first is a simple thermostat that couples with a given subset of the atoms within a system, controling their absolute motion. The second is more elaborate and can thermostat tethered pairs of atoms and in this case two thermostats are created: one that controls the absolute center of mass velocity of each pair and another that controls their motion relative to one another. __init__(self, temperature, relativeTemperature, collisionFrequency, relativeCollisionFrequency, numDOFs, chainLength, numMTS, numYoshidaSuzuki, chainID, thermostatedAtoms, thermostatedPairs) → NoseHooverChainÂ¶ __init__(self, other) → NoseHooverChain Create a NoseHooverChain. Parameters temperature (double) â the temperature of the heat bath for absolute motion (in Kelvin) collisionFrequency (double) â the collision frequency for absolute motion (in 1/ps) relativeTemperature (double) â the temperature of the heat bath for relative motion(in Kelvin). This is only used if the list of thermostated pairs is not empty. relativeCollisionFrequency (double) â the collision frequency for relative motion(in 1/ps). This is only used if the list of thermostated pairs is not empty. numDOFs (int) â the number of degrees of freedom in the particles that interact with this chain chainLength (int) â the length of (number of particles in) this heat bath numMTS (int) â the number of multi time steps used to propagate this chain numYoshidaSuzuki (int) â the number of Yoshida Suzuki steps used to propagate this chain (1, 3, 5, or 7). chainID (int) â the chain id used to distinguish this Nose-Hoover chain from others that may be used to control a different set of particles, e.g. for Drude oscillators thermostatedAtoms (vector< int >) â the list of atoms to be handled by this thermostat thermostatedPairs (vector< std::pair< int, int > >) â the list of connected pairs to be thermostated; their absolute center of mass motion will be thermostated independently from their motion relative to one another. Methods __init__(->Â NoseHooverChain) Create a NoseHooverChain. getChainID(self) Get the chain id used to identify this chain getChainLength(self) Get the chain length of this heat bath. getCollisionFrequency(self) Get the collision frequency for treating absolute particle motion (in 1/ps). getNumDegreesOfFreedom(self) Get the number of degrees of freedom in the particles controled by this heat bath. getNumMultiTimeSteps(self) Get the number of steps used in the multi time step propagation. getNumYoshidaSuzukiTimeSteps(self) Get the number of steps used in the Yoshida-Suzuki decomposition for multi time step propagation. getRelativeCollisionFrequency(self) Get the collision frequency for treating relative particle motion (in 1/ps). getRelativeTemperature(self) Get the temperature of the heat bath for treating relative particle motion (in Kelvin). getTemperature(self) Get the temperature of the heat bath for treating absolute particle motion (in Kelvin). getThermostatedAtoms(self) Get the atom ids of all atoms that are thermostated getThermostatedPairs(self) Get the list of any connected pairs to be handled by this thermostat. getYoshidaSuzukiWeights(self) Get the weights used in the Yoshida Suzuki multi time step decomposition (dimensionless) setCollisionFrequency(self,Â frequency) Set the collision frequency for treating absolute particle motion. setNumDegreesOfFreedom(self,Â numDOF) Set the number of degrees of freedom in the particles controled by this heat bath. setRelativeCollisionFrequency(self,Â frequency) Set the collision frequency for treating relative particle motion if this thermostat has been set up to handle connected pairs of atoms. setRelativeTemperature(self,Â temperature) Set the temperature of the heat bath for treating relative motion if this thermostat has been set up to treat connected pairs of atoms. setTemperature(self,Â temperature) Set the temperature of the heat bath for treating absolute particle motion. setThermostatedAtoms(self,Â atomIDs) Set list of atoms that are handled by this thermostat setThermostatedPairs(self,Â pairIDs) In case this thermostat handles the kinetic energy of Drude particles set the atom IDs of all parent atoms. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getTemperature(self) → doubleÂ¶ Get the temperature of the heat bath for treating absolute particle motion (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin. Return type double setTemperature(self, temperature)Â¶ Set the temperature of the heat bath for treating absolute particle motion. This will affect any new Contexts you create, but not ones that already exist. Parameters temperature (double) â the temperature of the heat bath (in Kelvin) getRelativeTemperature(self) → doubleÂ¶ Get the temperature of the heat bath for treating relative particle motion (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin. Return type double setRelativeTemperature(self, temperature)Â¶ Set the temperature of the heat bath for treating relative motion if this thermostat has been set up to treat connected pairs of atoms. This will affect any new Contexts you create, but not ones that already exist. Parameters temperature (double) â the temperature of the heat bath for relative motion (in Kelvin) getCollisionFrequency(self) → doubleÂ¶ Get the collision frequency for treating absolute particle motion (in 1/ps). Returns the collision frequency, measured in 1/ps. Return type double setCollisionFrequency(self, frequency)Â¶ Set the collision frequency for treating absolute particle motion. This will affect any new Contexts you create, but not those that already exist. Parameters frequency (double) â the collision frequency (in 1/ps) getRelativeCollisionFrequency(self) → doubleÂ¶ Get the collision frequency for treating relative particle motion (in 1/ps). Returns the collision frequency, measured in 1/ps. Return type double setRelativeCollisionFrequency(self, frequency)Â¶ Set the collision frequency for treating relative particle motion if this thermostat has been set up to handle connected pairs of atoms. This will affect any new Contexts you create, but not those that already exist. Parameters frequency (double) â the collision frequency (in 1/ps) getNumDegreesOfFreedom(self) → intÂ¶ Get the number of degrees of freedom in the particles controled by this heat bath. Returns the number of degrees of freedom. Return type int setNumDegreesOfFreedom(self, numDOF)Â¶ Set the number of degrees of freedom in the particles controled by this heat bath. This will affect any new Contexts you create, but not those that already exist. Parameters numDOF (int) â the number of degrees of freedom. getChainLength(self) → intÂ¶ Get the chain length of this heat bath. Returns the chain length. Return type int getNumMultiTimeSteps(self) → intÂ¶ Get the number of steps used in the multi time step propagation. Returns the number of multi time steps. Return type int getNumYoshidaSuzukiTimeSteps(self) → intÂ¶ Get the number of steps used in the Yoshida-Suzuki decomposition for multi time step propagation. Returns the number of multi time steps in the Yoshida-Suzuki decomposition. Return type int getChainID(self) → intÂ¶ Get the chain id used to identify this chain Returns the chain id Return type int getThermostatedAtoms(self) → vectoriÂ¶ Get the atom ids of all atoms that are thermostated Returns ids of all atoms that are being handled by this thermostat Return type vector< int > setThermostatedAtoms(self, atomIDs)Â¶ Set list of atoms that are handled by this thermostat Parameters atomIDs (vector< int >) â getThermostatedPairs(self) → vectorpairiiÂ¶ Get the list of any connected pairs to be handled by this thermostat. If this is a regular thermostat, returns an empty vector. Returns list of connected pairs. Return type vector< std::pair< int, int > > setThermostatedPairs(self, pairIDs)Â¶ In case this thermostat handles the kinetic energy of Drude particles set the atom IDs of all parent atoms. Parameters pairIDs (vector< std::pair< int, int > >) â the list of connected pairs to thermostat. getYoshidaSuzukiWeights(self) → vectordÂ¶ Get the weights used in the Yoshida Suzuki multi time step decomposition (dimensionless) Returns the weights for the Yoshida-Suzuki integration Return type vector< double > usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool