PeriodicTorsionForceÂ¶ class openmm.openmm.PeriodicTorsionForce(*args)Â¶ This class implements an interaction between groups of four particles that varies periodically with the torsion angle between them. To use it, create a PeriodicTorsionForce object then call addTorsion() once for each torsion. After a torsion has been added, you can modify its force field parameters by calling setTorsionParameters(). This will have no effect on Contexts that already exist unless you call updateParametersInContext(). __init__(self) → PeriodicTorsionForceÂ¶ __init__(self, other) → PeriodicTorsionForce Create a PeriodicTorsionForce. Methods __init__(->Â PeriodicTorsionForce) Create a PeriodicTorsionForce. addTorsion(self,Â particle1,Â particle2,Â â¦) Add a periodic torsion term to the force field. getForceGroup(self) Get the force group this Force belongs to. getName(self) Get the name of this Force. getNumTorsions(self) Get the number of periodic torsion terms in the potential function getTorsionParameters(self,Â index) Get the force field parameters for a periodic torsion term. setForceGroup(self,Â group) Set the force group this Force belongs to. setName(self,Â name) Set the name of this Force. setTorsionParameters(self,Â index,Â particle1,Â â¦) Set the force field parameters for a periodic torsion term. setUsesPeriodicBoundaryConditions(self,Â periodic) Set whether this force should apply periodic boundary conditions when calculating displacements. updateParametersInContext(self,Â context) Update the per-torsion parameters in a Context to match those stored in this Force object. usesPeriodicBoundaryConditions(self) Returns whether or not this force makes use of periodic boundary conditions. Attributes thisown The membership flag property thisownÂ¶ The membership flag getNumTorsions(self) → intÂ¶ Get the number of periodic torsion terms in the potential function addTorsion(self, particle1, particle2, particle3, particle4, periodicity, phase, k) → intÂ¶ Add a periodic torsion term to the force field. Parameters particle1 (int) â the index of the first particle forming the torsion particle2 (int) â the index of the second particle forming the torsion particle3 (int) â the index of the third particle forming the torsion particle4 (int) â the index of the fourth particle forming the torsion periodicity (int) â the periodicity of the torsion phase (double) â the phase offset of the torsion, measured in radians k (double) â the force constant for the torsion Returns the index of the torsion that was added Return type int getTorsionParameters(self, index)Â¶ Get the force field parameters for a periodic torsion term. Parameters index (int) â the index of the torsion for which to get parameters Returns particle1 (int) â the index of the first particle forming the torsion particle2 (int) â the index of the second particle forming the torsion particle3 (int) â the index of the third particle forming the torsion particle4 (int) â the index of the fourth particle forming the torsion periodicity (int) â the periodicity of the torsion phase (double) â the phase offset of the torsion, measured in radians k (double) â the force constant for the torsion setTorsionParameters(self, index, particle1, particle2, particle3, particle4, periodicity, phase, k)Â¶ Set the force field parameters for a periodic torsion term. Parameters index (int) â the index of the torsion for which to set parameters particle1 (int) â the index of the first particle forming the torsion particle2 (int) â the index of the second particle forming the torsion particle3 (int) â the index of the third particle forming the torsion particle4 (int) â the index of the fourth particle forming the torsion periodicity (int) â the periodicity of the torsion phase (double) â the phase offset of the torsion, measured in radians k (double) â the force constant for the torsion updateParametersInContext(self, context)Â¶ Update the per-torsion parameters in a Context to match those stored in this Force object. This method provides an efficient method to update certain parameters in an existing Context without needing to reinitialize it. Simply call setTorsionParameters() to modify this objectâs parameters, then call updateParametersInContext() to copy them over to the Context. The only information this method updates is the values of per-torsion parameters. The set of particles involved in a torsion cannot be changed, nor can new torsions be added. setUsesPeriodicBoundaryConditions(self, periodic)Â¶ Set whether this force should apply periodic boundary conditions when calculating displacements. Usually this is not appropriate for bonded forces, but there are situations when it can be useful. usesPeriodicBoundaryConditions(self) → boolÂ¶ Returns whether or not this force makes use of periodic boundary conditions. Returns true if force uses PBC and false otherwise Return type bool getForceGroup(self) → intÂ¶ Get the force group this Force belongs to. getName(self) → std::string const &Â¶ Get the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful. setForceGroup(self, group)Â¶ Set the force group this Force belongs to. Parameters group (int) â the group index. Legal values are between 0 and 31 (inclusive). setName(self, name)Â¶ Set the name of this Force. This is an arbitrary, user modifiable identifier. By default it equals the class name, but you can change it to anything useful.