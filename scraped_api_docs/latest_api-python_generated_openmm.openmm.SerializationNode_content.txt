SerializationNodeÂ¶ class openmm.openmm.SerializationNode(*args, **kwargs)Â¶ A SerializationNode stores information about an object during serialization or deserialization. When an object is serialized, its SerializationProxy is first called to copy information about the object into a SerializationNode. That information can then be written to the output stream in the desired format. When an object is deserialized, the input stream is read and the information is stored into a SerializationNode. The appropriate SerializationProxy is then called to reconstruct the object. SerializationNodes are arranged in a tree. There will often be a one-to-one correspondence between objects and SerializationNodes, but that need not always be true. A proxy is free to create whatever child nodes it wants and store information in them using whatever organization is most convenient. Each SerializationNode can store an arbitrary set of âpropertiesâ, represented as key-value pairs. The key is always a string, while the value may be a string, an int, or a double. If a value is specified using one data type and then accessed as a different data type, the node will attempt to convert the value in an appropriate way. For example, it is always reasonable to call getStringProperty() to access a property as a string. Similarly, you can use setStringProperty() to specify a property and then access it using getIntProperty(). This will produce the expected result if the original value was, in fact, the string representation of an int, but if the original string was non-numeric, the result is undefined. __init__(*args, **kwargs)Â¶ Initialize self. See help(type(self)) for accurate signature. Methods __init__(*args,Â **kwargs) Initialize self. createChildNode(self,Â name) Create a new child node by serializing an object. getBoolProperty(->Â bool) Get the property with a particular name, specified as a bool. getChildNode(->Â SerializationNode) Get a reference to the child node with a particular name. getChildren(->Â std) Get a reference to this nodeâs child nodes. getDoubleProperty(->Â double) Get the property with a particular name, specified as a double. getIntProperty(->Â int) Get the property with a particular name, specified as an int. getLongProperty(->Â longÂ long) Get the property with a particular name, specified as a long long. getName(self) Get the name of this SerializationNode. getProperties(self) Get a map containing all of this nodeâs properties. getStringProperty(->Â std) Get the property with a particular name, specified as a string. hasProperty(self,Â name) Determine whether this node has a property with a particular node. setBoolProperty(self,Â name,Â value) Set the value of a property, specified as a bool. setDoubleProperty(self,Â name,Â value) Set the value of a property, specified as a double. setIntProperty(self,Â name,Â value) Set the value of a property, specified as an int. setLongProperty(self,Â name,Â value) Set the value of a property, specified as a long long. setName(self,Â name) Set the name of this SerializationNode. setStringProperty(self,Â name,Â value) Set the value of a property, specified as a string. Attributes thisown The membership flag property thisownÂ¶ The membership flag getName(self) → std::string const &Â¶ Get the name of this SerializationNode. setName(self, name)Â¶ Set the name of this SerializationNode. Parameters name (string) â the new name of the SerializationNode getChildren(self) → std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > constÂ¶ getChildren(self) → std::vector< OpenMM::SerializationNode,std::allocator< OpenMM::SerializationNode > > & Get a reference to this nodeâs child nodes. getChildNode(self, name) → SerializationNodeÂ¶ getChildNode(self, name) → SerializationNode Get a reference to the child node with a particular name. If there is no child with the specified name, this throws an exception. Parameters the (string) â name of the child node to get getProperties(self) → mapstringstringÂ¶ Get a map containing all of this nodeâs properties. hasProperty(self, name) → boolÂ¶ Determine whether this node has a property with a particular node. Parameters name (string) â the name of the property to check for getStringProperty(self, name) → std::string constÂ¶ getStringProperty(self, name, defaultValue) → std::string const & Get the property with a particular name, specified as a string. If there is no property with the specified name, a default value is returned instead. Parameters name (string) â the name of the property to get defaultValue (string) â the value to return if the specified property does not exist setStringProperty(self, name, value) → SerializationNodeÂ¶ Set the value of a property, specified as a string. Parameters name (string) â the name of the property to set value (string) â the value to set for the property getIntProperty(self, name) → intÂ¶ getIntProperty(self, name, defaultValue) → int Get the property with a particular name, specified as an int. If there is no property with the specified name, a default value is returned instead. Parameters name (string) â the name of the property to get defaultValue (int) â the value to return if the specified property does not exist setIntProperty(self, name, value) → SerializationNodeÂ¶ Set the value of a property, specified as an int. Parameters name (string) â the name of the property to set value (int) â the value to set for the property getLongProperty(self, name) → long longÂ¶ getLongProperty(self, name, defaultValue) → long long Get the property with a particular name, specified as a long long. If there is no property with the specified name, a default value is returned instead. Parameters name (string) â the name of the property to get defaultValue (long long) â the value to return if the specified property does not exist setLongProperty(self, name, value) → SerializationNodeÂ¶ Set the value of a property, specified as a long long. Parameters name (string) â the name of the property to set value (long long) â the value to set for the property getBoolProperty(self, name) → boolÂ¶ getBoolProperty(self, name, defaultValue) → bool Get the property with a particular name, specified as a bool. If there is no property with the specified name, a default value is returned instead. Parameters name (string) â the name of the property to get defaultValue (bool) â the value to return if the specified property does not exist setBoolProperty(self, name, value) → SerializationNodeÂ¶ Set the value of a property, specified as a bool. Parameters name (string) â the name of the property to set value (bool) â the value to set for the property getDoubleProperty(self, name) → doubleÂ¶ getDoubleProperty(self, name, defaultValue) → double Get the property with a particular name, specified as a double. If there is no property with the specified name, a default value is returned instead. Parameters name (string) â the name of the property to get defaultValue (double) â the value to return if the specified property does not exist setDoubleProperty(self, name, value) → SerializationNodeÂ¶ Set the value of a property, specified as a double. Parameters name (string) â the name of the property to set value (double) â the value to set for the property createChildNode(self, name) → SerializationNodeÂ¶ Create a new child node by serializing an object. A SerializationProxy is automatically selected based on the objectâs type, then invoked to populate the newly created node. Note that, while this method is templatized based on the type of object being serialized, the typeid() operator is used to select the proxy. This means the template argument may be a base class, and the correct proxies will still be selected for objects of different subclasses. Parameters name (string) â the name of the new node to create object (T *) â a pointer to the object to serialize Returns a reference to the newly created node Return type SerializationNode