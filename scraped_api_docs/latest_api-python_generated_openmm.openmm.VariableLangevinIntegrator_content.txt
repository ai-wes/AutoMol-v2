VariableLangevinIntegratorÂ¶ class openmm.openmm.VariableLangevinIntegrator(*args)Â¶ This is an error controlled, variable time step Integrator that simulates a System using Langevin dynamics. It compares the result of the Langevin integrator to that of an explicit Euler integrator, takes the difference between the two as a measure of the integration error in each time step, and continuously adjusts the step size to keep the error below a specified tolerance. This both improves the stability of the integrator and allows it to take larger steps on average, while still maintaining comparable accuracy to a fixed step size integrator. It is best not to think of the error tolerance as having any absolute meaning. It is just an adjustable parameter that affects the step size and integration accuracy. You should try different values to find the largest one that produces a trajectory sufficiently accurate for your purposes. 0.001 is often a good starting point. You can optionally set a maximum step size it will ever use. This is useful to prevent it from taking excessively large steps in usual situations, such as when the system is right at a local energy minimum. __init__(self, temperature, frictionCoeff, errorTol) → VariableLangevinIntegratorÂ¶ __init__(self, other) → VariableLangevinIntegrator Create a VariableLangevinIntegrator. Parameters temperature (double) â the temperature of the heat bath (in Kelvin) frictionCoeff (double) â the friction coefficient which couples the system to the heat bath (in inverse picoseconds) errorTol (double) â the error tolerance Methods __init__(->Â VariableLangevinIntegrator) Create a VariableLangevinIntegrator. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getErrorTolerance(self) Get the error tolerance. getFriction(self) Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). getIntegrationForceGroups(self) Get which force groups to use for integration. getMaximumStepSize(self) Get the maximum step size the integrator will ever use, in ps. getRandomNumberSeed(self) Get the random number seed. getStepSize(self) Get the size of each time step, in picoseconds. getTemperature(self) Get the temperature of the heat bath (in Kelvin). setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setErrorTolerance(self,Â tol) Set the error tolerance. setFriction(self,Â coeff) Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). setIntegrationForceGroups(groups) Set which force groups to use for integration. setMaximumStepSize(self,Â size) Set the maximum step size the integrator will ever use, in ps. setRandomNumberSeed(self,Â seed) Set the random number seed. setStepSize(self,Â size) Set the size of each time step, in picoseconds. setTemperature(self,Â temp) Set the temperature of the heat bath (in Kelvin). step(self,Â steps) Advance a simulation through time by taking a series of time steps. stepTo(self,Â time) Advance a simulation through time by taking a series of steps until a specified time is reached. Attributes thisown The membership flag property thisownÂ¶ The membership flag getTemperature(self) → doubleÂ¶ Get the temperature of the heat bath (in Kelvin). Returns the temperature of the heat bath, measured in Kelvin Return type double setTemperature(self, temp)Â¶ Set the temperature of the heat bath (in Kelvin). Parameters temp (double) â the temperature of the heat bath, measured in Kelvin getFriction(self) → doubleÂ¶ Get the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Returns the friction coefficient, measured in 1/ps Return type double setFriction(self, coeff)Â¶ Set the friction coefficient which determines how strongly the system is coupled to the heat bath (in inverse ps). Parameters coeff (double) â the friction coefficient, measured in 1/ps getErrorTolerance(self) → doubleÂ¶ Get the error tolerance. setErrorTolerance(self, tol)Â¶ Set the error tolerance. getMaximumStepSize(self) → doubleÂ¶ Get the maximum step size the integrator will ever use, in ps. If this is 0 (the default), no limit will be applied to step sizes. setMaximumStepSize(self, size)Â¶ Set the maximum step size the integrator will ever use, in ps. If this is 0 (the default), no limit will be applied to step sizes. getRandomNumberSeed(self) → intÂ¶ Get the random number seed. See setRandomNumberSeed() for details. setRandomNumberSeed(self, seed)Â¶ Set the random number seed. The precise meaning of this parameter is undefined, and is left up to each Platform to interpret in an appropriate way. It is guaranteed that if two simulations are run with different random number seeds, the sequence of random forces will be different. On the other hand, no guarantees are made about the behavior of simulations that use the same seed. In particular, Platforms are permitted to use non-deterministic algorithms which produce different results on successive runs, even if those runs were initialized identically. If seed is set to 0 (which is the default value assigned), a unique seed is chosen when a Context is created from this Force. This is done to ensure that each Context receives unique random seeds without you needing to set them explicitly. step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take stepTo(self, time)Â¶ Advance a simulation through time by taking a series of steps until a specified time is reached. When this method returns, the simulation time will exactly equal the time which was specified. If you call this method and specify a time that is earlier than the current time, it will return without doing anything. Parameters time (double) â the time to which the simulation should be advanced getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps