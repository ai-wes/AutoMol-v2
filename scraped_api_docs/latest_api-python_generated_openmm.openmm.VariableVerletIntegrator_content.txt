VariableVerletIntegratorÂ¶ class openmm.openmm.VariableVerletIntegrator(*args)Â¶ This is an error controlled, variable time step Integrator that simulates a System using the leap-frog Verlet algorithm. It compares the result of the Verlet integrator to that of an explicit Euler integrator, takes the difference between the two as a measure of the integration error in each time step, and continuously adjusts the step size to keep the error below a specified tolerance. This both improves the stability of the integrator and allows it to take larger steps on average, while still maintaining comparable accuracy to a fixed step size integrator. It is best not to think of the error tolerance as having any absolute meaning. It is just an adjustable parameter that affects the step size and integration accuracy. You should try different values to find the largest one that produces a trajectory sufficiently accurate for your purposes. 0.001 is often a good starting point. Unlike a fixed step size Verlet integrator, variable step size Verlet is not symplectic. This means that at a given accuracy level, energy is not as precisely conserved over long time periods. This makes it most appropriate for constant temperate simulations. In constant energy simulations where precise energy conservation over long time periods is important, a fixed step size Verlet integrator may be more appropriate. You can optionally set a maximum step size it will ever use. This is useful to prevent it from taking excessively large steps in usual situations, such as when the system is right at a local energy minimum. __init__(self, errorTol) → VariableVerletIntegratorÂ¶ __init__(self, other) → VariableVerletIntegrator Create a VariableVerletIntegrator. Parameters errorTol (double) â the error tolerance Methods __init__(->Â VariableVerletIntegrator) Create a VariableVerletIntegrator. getConstraintTolerance(self) Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getErrorTolerance(self) Get the error tolerance. getIntegrationForceGroups(self) Get which force groups to use for integration. getMaximumStepSize(self) Get the maximum step size the integrator will ever use, in ps. getStepSize(self) Get the size of each time step, in picoseconds. setConstraintTolerance(self,Â tol) Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setErrorTolerance(self,Â tol) Set the error tolerance. setIntegrationForceGroups(groups) Set which force groups to use for integration. setMaximumStepSize(self,Â size) Set the maximum step size the integrator will ever use, in ps. setStepSize(self,Â size) Set the size of each time step, in picoseconds. step(self,Â steps) Advance a simulation through time by taking a series of time steps. stepTo(self,Â time) Advance a simulation through time by taking a series of steps until a specified time is reached. Attributes thisown The membership flag property thisownÂ¶ The membership flag getErrorTolerance(self) → doubleÂ¶ Get the error tolerance. setErrorTolerance(self, tol)Â¶ Set the error tolerance. getMaximumStepSize(self) → doubleÂ¶ Get the maximum step size the integrator will ever use, in ps. If this is 0 (the default), no limit will be applied to step sizes. setMaximumStepSize(self, size)Â¶ Set the maximum step size the integrator will ever use, in ps. If this is 0 (the default), no limit will be applied to step sizes. step(self, steps)Â¶ Advance a simulation through time by taking a series of time steps. Parameters steps (int) â the number of time steps to take stepTo(self, time)Â¶ Advance a simulation through time by taking a series of steps until a specified time is reached. When this method returns, the simulation time will exactly equal the time which was specified. If you call this method and specify a time that is earlier than the current time, it will return without doing anything. Parameters time (double) â the time to which the simulation should be advanced getConstraintTolerance(self) → doubleÂ¶ Get the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. getIntegrationForceGroups(self) → intÂ¶ Get which force groups to use for integration. By default, all force groups are included. This is interpreted as a set of bit flags: the forces from group i will be included if (groups&(1<<i)) != 0. getStepSize(self) → doubleÂ¶ Get the size of each time step, in picoseconds. If this integrator uses variable time steps, the size of the most recent step is returned. Returns the step size, measured in ps Return type double setConstraintTolerance(self, tol)Â¶ Set the distance tolerance within which constraints are maintained, as a fraction of the constrained distance. setIntegrationForceGroups(groups)Â¶ Set which force groups to use for integration. By default, all force groups are included. Parameters groups (set or int) â a set of indices for which force groups to include when integrating the equations of motion. Alternatively, the groups can be passed as a single unsigned integer interpreted as a bitmask, in which case group i will be included if (groups&(1<<i)) != 0. setStepSize(self, size)Â¶ Set the size of each time step, in picoseconds. If this integrator uses variable time steps, the effect of calling this method is undefined, and it may simply be ignored. Parameters size (double) â the step size, measured in ps