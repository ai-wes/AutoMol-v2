OpenMM Userâs Manual and Theory GuideÂ¶ 1. Introduction 1.1. Online Resources 1.2. Referencing OpenMM 1.3. Acknowledgments Part I: The OpenMM Application Layer 2. Getting Started 2.1. Introduction 2.2. Installing OpenMM 3. Running Simulations 3.1. A First Example 3.2. Using AMBER Files 3.3. Using Gromacs Files 3.4. Using CHARMM Files 3.5. The OpenMM-Setup Application 3.6. Simulation Parameters 3.6.1. Platforms 3.6.2. Force Fields 3.6.3. Small molecule parameters 3.6.4. AMBER Implicit Solvent 3.6.5. Nonbonded Interactions 3.6.6. Constraints 3.6.7. Heavy Hydrogens 3.6.8. Integrators 3.6.9. Temperature Coupling 3.6.10. Pressure Coupling 3.6.11. Energy Minimization 3.6.12. Removing Center of Mass Motion 3.6.13. Writing Trajectories 3.6.14. Recording Other Data 3.6.15. Saving Simulation Progress and Results 3.6.16. Enhanced Sampling Methods 4. Model Building and Editing 4.1. Adding Hydrogens 4.2. Adding Solvent 4.3. Adding a Membrane 4.4. Adding or Removing Extra Particles 4.5. Removing Water 4.6. Saving The Results 5. Advanced Simulation Examples 5.1. Simulated Annealing 5.2. Applying an External Force to Particles: a Spherical Container 5.3. Extracting and Reporting Forces (and other data) 5.4. Computing Energies 6. Add-On Packages 6.1. OpenMM-Torch 6.2. OpenMM-ML 6.3. OpenMMTools 6.4. OpenMM-HIP 6.5. openmmforcefields 6.6. OpenMM-PLUMED 7. Creating Force Fields 7.1. Basic Concepts 7.1.1. Atom Types and Atom Classes 7.1.2. Residue Templates 7.1.3. Forces 7.2. Writing the XML File 7.2.1. <AtomTypes> 7.2.2. <Residues> 7.2.3. <Patches> 7.2.4. Missing residue templates 7.2.5. <HarmonicBondForce> 7.2.6. <HarmonicAngleForce> 7.2.7. <PeriodicTorsionForce> 7.2.8. <RBTorsionForce> 7.2.9. <CMAPTorsionForce> 7.2.10. <NonbondedForce> 7.2.11. <GBSAOBCForce> 7.2.12. <CustomBondForce> 7.2.13. <CustomAngleForce> 7.2.14. <CustomTorsionForce> 7.2.15. <CustomNonbondedForce> 7.2.16. <CustomGBForce> 7.2.17. <CustomHbondForce> 7.2.18. <CustomManyParticleForce> 7.2.19. <LennardJonesForce> 7.2.20. Writing Custom Expressions 7.2.21. Tabulated Functions 7.2.22. Residue Template Parameters 7.2.23. Including Other Files 7.3. Using Multiple Files 7.4. Extending ForceField 7.4.1. Adding new force types 7.4.2. Adding residue template generators Part II: The OpenMM Library 8. Introduction 8.1. What Is the OpenMM Library? 8.1.1. How to get started 8.1.2. License 8.2. Design Principles 8.3. Choice of Language 8.4. Architectural Overview 8.5. The OpenMM Public API 8.6. The OpenMM Low Level API 8.7. Platforms 9. Compiling OpenMM from Source Code 9.1. Compiling on Linux and Mac 9.1.1. Prerequisites 9.1.2. Step 1: Configure with CMake 9.1.3. Step 2: Build 9.1.4. Step 3: Test your build 9.1.5. Step 3: Install 9.1.6. Step 3: Install the Python API 9.2. Compiling on Windows 9.2.1. Prerequisites 9.2.2. Step 1: Configure with CMake 9.2.3. Step 2: Build and Install 9.2.4. Step 3: Install the Python API 9.2.5. Step 4: Test your build 9.3. Building the Documentation (Optional) 9.4. Using local build of OpenMM alongside conda tools that depend on it 9.4.1. Step 1: Install your tools as usual 9.4.2. Step 2: Remove conda openmm package 9.4.3. Step 3: Install local build of openmm 10. OpenMM Tutorials 10.1. Example Files Overview 10.2. Running Example Files 10.2.1. Visual Studio 10.2.2. Mac OS X/Linux 10.3. HelloArgon Program 10.3.1. Including OpenMM-defined functions 10.3.2. Running a program on GPU platforms 10.3.3. Running a simulation using the OpenMM public API 10.3.4. Error handling for OpenMM 10.3.5. Writing out PDB files 10.3.6. HelloArgon output 10.4. HelloSodiumChloride Program 10.4.1. Simple molecular dynamics system 10.4.2. Interface routines 10.5. HelloEthane Program 11. Platform-Specific Properties 11.1. OpenCL Platform 11.2. CUDA Platform 11.3. CPU Platform 11.4. Determinism 12. Using OpenMM with Software Written in Languages Other than C++ 12.1. C API 12.1.1. Mechanics of using the C API 12.1.2. Mapping from the C++ API to the C API 12.1.3. Exceptions 12.1.4. OpenMM_Vec3 helper type 12.1.5. Array helper types 12.2. Fortran 95 API 12.2.1. Mechanics of using the Fortran API 12.2.2. Mapping from the C++ API to the Fortran API 12.2.3. OpenMM_Vec3 helper type 12.2.4. Array helper types 12.3. Python API 12.3.1. Mapping from the C++ API to the Python API 12.3.2. Mechanics of using the Python API 12.3.3. Units and dimensional analysis 13. Examples of OpenMM Integration 13.1. GROMACS 13.2. TINKER-OpenMM 14. Testing and Validation of OpenMM 14.1. Description of Tests 14.1.1. Unit tests 14.1.2. System tests 14.1.3. Direct comparisons between OpenMM and other programs 14.2. Test Results 14.2.1. Comparison to Reference Platform 14.2.2. Energy Conservation 14.2.3. Comparison to Gromacs 15. AMOEBA Plugin 15.1. OpenMM AMOEBA Supported Forces and Options 15.1.1. Supported Forces and Options 15.1.2. Supported Integrators 15.2. OpenMM AMOEBA Validation 16. Ring Polymer Molecular Dynamics (RPMD) Plugin 17. Drude Plugin Part III: The Theory Behind OpenMM 18. Introduction 18.1. Overview 18.2. Units 18.3. Physical Constants 19. Standard Forces 19.1. HarmonicBondForce 19.2. HarmonicAngleForce 19.3. PeriodicTorsionForce 19.4. RBTorsionForce 19.5. CMAPTorsionForce 19.6. NonbondedForce 19.6.1. Lennard-Jones Interaction 19.6.2. Coulomb Interaction Without Cutoff 19.6.3. Coulomb Interaction With Cutoff 19.6.4. Coulomb Interaction With Ewald Summation 19.6.5. Coulomb Interaction With Particle Mesh Ewald 19.6.6. Lennard-Jones Interaction With Particle Mesh Ewald 19.7. GBSAOBCForce 19.7.1. Generalized Born Term 19.7.2. Surface Area Term 19.8. GayBerneForce 19.9. AndersenThermostat 19.10. MonteCarloBarostat 19.11. MonteCarloAnisotropicBarostat 19.12. MonteCarloMembraneBarostat 19.13. MonteCarloFlexibleBarostat 19.14. CMMotionRemover 19.15. RMSDForce 20. Custom Forces 20.1. CustomBondForce 20.2. CustomAngleForce 20.3. CustomTorsionForce 20.4. CustomNonbondedForce 20.5. CustomExternalForce 20.6. CustomCompoundBondForce 20.7. CustomCentroidBondForce 20.8. CustomManyParticleForce 20.9. CustomGBForce 20.10. CustomHbondForce 20.11. CustomCVForce 20.12. ATMForce 20.13. Writing Custom Expressions 20.14. Setting Parameters 20.15. Parameter Derivatives 21. Integrators 21.1. VerletIntegrator 21.2. LangevinIntegator 21.3. LangevinMiddleIntegrator 21.4. NoseHooverIntegrator 21.5. BrownianIntegrator 21.6. VariableVerletIntegrator 21.7. VariableLangevinIntegrator 21.8. CustomIntegrator 22. Other Features 22.1. Periodic Boundary Conditions 22.2. LocalEnergyMinimizer 22.3. XMLSerializer 22.4. Force Groups 22.5. Virtual Sites 22.6. Random Numbers with Stochastic Integrators and Forces 23. Bibliography Portions copyright (c) 2008-2017 Stanford University and the Authors Contributors: Kyle Beauchamp, Christopher Bruns, John Chodera, Peter Eastman, Mark Friedrichs, Joy P. Ku, Tom Markland, Vijay Pande, Randy Radmer, Michael Sherman, Jason Swails, Lee-Ping Wang Permission is hereby granted, free of charge, to any person obtaining a copy of this document (the âDocumentâ), to deal in the Document without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Document, and to permit persons to whom the Document is furnished to do so, subject to the following conditions: This copyright and permission notice shall be included in all copies or substantial portions of the Document. THE DOCUMENT IS PROVIDED âAS ISâ, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENT OR THE USE OR OTHER DEALINGS IN THE DOCUMENT.